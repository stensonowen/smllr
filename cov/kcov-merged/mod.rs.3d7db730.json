var data = {lines:[
{"lineNum":"    1","line":"use vfs::{File, MetaData, VFS};"},
{"lineNum":"    2","line":"use catalog::proxy::Duplicates;"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"pub mod selector;"},
{"lineNum":"    5","line":"use self::selector::Selector;"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"mod test; // include unit tests"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"/// Trait for acting on duplicate files"},
{"lineNum":"   10","line":"pub trait FileActor<V: VFS, S: Selector<V>> {"},
{"lineNum":"   11","line":"    /// FileActor<V, S>.act(Duplicates) lets selector S select the file"},
{"lineNum":"   12","line":"    /// in duplicates which is considered the \'true\' file and then"},
{"lineNum":"   13","line":"    /// \'acts\' in a manner apropriate to the fileactor."},
{"lineNum":"   14","line":"    fn act(&mut self, dups: Duplicates);"},
{"lineNum":"   15","line":"}"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"// call FileActor methods on objects on the heap that support it"},
{"lineNum":"   18","line":"impl<V: VFS, S: Selector<V>> FileActor<V, S> for Box<FileActor<V, S>> {"},
{"lineNum":"   19","line":"    fn act(&mut self, dups: Duplicates) {"},
{"lineNum":"   20","line":"        (**self).act(dups)"},
{"lineNum":"   21","line":"    }"},
{"lineNum":"   22","line":"}"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"/// Actor that prints file names but doesn\'t modify the filesystem"},
{"lineNum":"   25","line":"pub struct FilePrinter<V: VFS, S: Selector<V>> {"},
{"lineNum":"   26","line":"    selector: S,"},
{"lineNum":"   27","line":"    vfs: V,"},
{"lineNum":"   28","line":"}"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"/// Actor that deletes all but the selected file"},
{"lineNum":"   31","line":"pub struct FileDeleter<V: VFS, S: Selector<V>> {"},
{"lineNum":"   32","line":"    selector: S,"},
{"lineNum":"   33","line":"    vfs: V,"},
{"lineNum":"   34","line":"}"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"/// Actor that replaces all but the selected file with links to it"},
{"lineNum":"   37","line":"pub struct FileLinker<V: VFS, S: Selector<V>> {"},
{"lineNum":"   38","line":"    selector: S,"},
{"lineNum":"   39","line":"    vfs: V,"},
{"lineNum":"   40","line":"}"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"// constructors for FilePrinter: dependency inject a Selector"},
{"lineNum":"   43","line":"impl<V: VFS, S: Selector<V>> FilePrinter<V, S> {"},
{"lineNum":"   44","line":"    pub fn new(v: V, s: S) -> Self {","class":"lineCov","hits":"1","order":"77",},
{"lineNum":"   45","line":"        FilePrinter {","class":"lineCov","hits":"1","order":"80",},
{"lineNum":"   46","line":"            selector: s,","class":"lineCov","hits":"1","order":"78",},
{"lineNum":"   47","line":"            vfs: v,","class":"lineCov","hits":"1","order":"79",},
{"lineNum":"   48","line":"        }"},
{"lineNum":"   49","line":"    }","class":"lineCov","hits":"1","order":"81",},
{"lineNum":"   50","line":"}"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"// constructors for FileDeleter: dependency inject a Selector"},
{"lineNum":"   53","line":"impl<V: VFS, S: Selector<V>> FileDeleter<V, S> {"},
{"lineNum":"   54","line":"    pub fn new(v: V, s: S) -> Self {","class":"lineCov","hits":"1","order":"306",},
{"lineNum":"   55","line":"        FileDeleter {","class":"lineCov","hits":"1","order":"309",},
{"lineNum":"   56","line":"            selector: s,","class":"lineCov","hits":"1","order":"307",},
{"lineNum":"   57","line":"            vfs: v,","class":"lineCov","hits":"1","order":"308",},
{"lineNum":"   58","line":"        }"},
{"lineNum":"   59","line":"    }","class":"lineCov","hits":"1","order":"310",},
{"lineNum":"   60","line":"}"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"// constructors for FileLinker: dependency inject a Selector"},
{"lineNum":"   63","line":"impl<V: VFS, S: Selector<V>> FileLinker<V, S> {"},
{"lineNum":"   64","line":"    pub fn new(v: V, s: S) -> Self {","class":"lineCov","hits":"1","order":"200",},
{"lineNum":"   65","line":"        FileLinker {","class":"lineCov","hits":"1","order":"203",},
{"lineNum":"   66","line":"            selector: s,","class":"lineCov","hits":"1","order":"201",},
{"lineNum":"   67","line":"            vfs: v,","class":"lineCov","hits":"1","order":"202",},
{"lineNum":"   68","line":"        }"},
{"lineNum":"   69","line":"    }","class":"lineCov","hits":"1","order":"204",},
{"lineNum":"   70","line":"}"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"// implement `act()` for a FilePrinter"},
{"lineNum":"   73","line":"impl<V: VFS, S: Selector<V>> FileActor<V, S> for FilePrinter<V, S> {"},
{"lineNum":"   74","line":"    /// <FilePrinter<V, S> as FileActor<V, S> >.act(), we simply print"},
{"lineNum":"   75","line":"    /// which file in the set is considered the \'true\' file and which are"},
{"lineNum":"   76","line":"    /// \'duplicates\' of it as well as how much space would be saved by"},
{"lineNum":"   77","line":"    /// deleting them."},
{"lineNum":"   78","line":"    fn act(&mut self, dups: Duplicates) {","class":"lineCov","hits":"1","order":"83",},
{"lineNum":"   79","line":"        let real = self.selector.select(&dups); // identify true file with selector S","class":"lineCov","hits":"1","order":"84",},
{"lineNum":"   80","line":"        let size = self.vfs","class":"lineCov","hits":"1","order":"97",},
{"lineNum":"   81","line":"            .get_file(real)","class":"lineCov","hits":"1","order":"98",},
{"lineNum":"   82","line":"            .unwrap()"},
{"lineNum":"   83","line":"            .get_metadata()"},
{"lineNum":"   84","line":"            .unwrap()"},
{"lineNum":"   85","line":"            .get_len(); // Get The size from the filesystem","class":"lineCov","hits":"1","order":"117",},
{"lineNum":"   86","line":"        let mut save_size = 0;","class":"lineCov","hits":"1","order":"118",},
{"lineNum":"   87","line":"        info!(\"`{:?}` is the true file\", real); //log the selection","class":"lineCov","hits":"1","order":"119",},
{"lineNum":"   88","line":"        println!(\"`{:?}` is the true file\", real); //print the file that is considered \'true\'","class":"lineCov","hits":"1","order":"120",},
{"lineNum":"   89","line":"                                                   // iterate over all other duplicates"},
{"lineNum":"   90","line":"        for f in dups.0.iter().filter(|&f| f.as_path() != real) {","class":"lineCov","hits":"1","order":"121",},
{"lineNum":"   91","line":"            info!(\"\\t`{:?}` is a duplicate\", f); // Log as duplicate","class":"lineCov","hits":"1","order":"122",},
{"lineNum":"   92","line":"            println!(\"\\t`{:?}` is a duplicate\", f); // and inform the user","class":"lineCov","hits":"1","order":"123",},
{"lineNum":"   93","line":"            save_size += size; //increment the amount of space we could save by size","class":"lineCov","hits":"1","order":"124",},
{"lineNum":"   94","line":"        }"},
{"lineNum":"   95","line":"        //log the amount of space that could be saved"},
{"lineNum":"   96","line":"        info!(","class":"lineCov","hits":"1","order":"125",},
{"lineNum":"   97","line":"            \"You can save {} bytes by deduplicating this file\","},
{"lineNum":"   98","line":"            save_size"},
{"lineNum":"   99","line":"        );"},
{"lineNum":"  100","line":"        //print the amount of space that could be saved to the user"},
{"lineNum":"  101","line":"        println!(","class":"lineCov","hits":"1","order":"126",},
{"lineNum":"  102","line":"            \"You can save {} bytes by deduplicating this file\","},
{"lineNum":"  103","line":"            save_size"},
{"lineNum":"  104","line":"        );"},
{"lineNum":"  105","line":"    }","class":"lineCov","hits":"1","order":"127",},
{"lineNum":"  106","line":"}"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"// implement `act()` for a FileDeleter"},
{"lineNum":"  109","line":"impl<V: VFS, S: Selector<V>> FileActor<V, S> for FileDeleter<V, S> {"},
{"lineNum":"  110","line":"    /// <FileDeleter<V, S> as FileActor<V, S> >.act(), we simply print what"},
{"lineNum":"  111","line":"    /// files are duplicated and have been deleted, which one is considered"},
{"lineNum":"  112","line":"    /// the \'true\' and which are and how much space has been freed."},
{"lineNum":"  113","line":"    fn act(&mut self, dups: Duplicates) {","class":"lineCov","hits":"1","order":"312",},
{"lineNum":"  114","line":"        //Get the file we arn\'t deleteing from the selector"},
{"lineNum":"  115","line":"        let real = self.selector.select(&dups);","class":"lineCov","hits":"1","order":"313",},
{"lineNum":"  116","line":"        let size = self.vfs","class":"lineCov","hits":"1","order":"314",},
{"lineNum":"  117","line":"            .get_file(real)","class":"lineCov","hits":"1","order":"315",},
{"lineNum":"  118","line":"            .unwrap()"},
{"lineNum":"  119","line":"            .get_metadata()"},
{"lineNum":"  120","line":"            .unwrap()"},
{"lineNum":"  121","line":"            .get_len(); //get the size from the filesystem","class":"lineCov","hits":"1","order":"316",},
{"lineNum":"  122","line":"        let mut save_size = 0;","class":"lineCov","hits":"1","order":"317",},
{"lineNum":"  123","line":"        info!(\"`{:?}` is the true file\", real); //Log which file we are not deleting","class":"lineCov","hits":"1","order":"318",},
{"lineNum":"  124","line":"        println!(\"`{:?}` is the true file\", real); //and inform the user","class":"lineCov","hits":"1","order":"319",},
{"lineNum":"  125","line":"                                                   // iterate over all other duplicates"},
{"lineNum":"  126","line":"        for f in dups.0.iter().filter(|&f| f.as_path() != real) {","class":"lineCov","hits":"1","order":"320",},
{"lineNum":"  127","line":"            info!(\"\\tDeleting `{:?}`...\", f); // log that we will delete them","class":"lineCov","hits":"1","order":"325",},
{"lineNum":"  128","line":"            println!(\"\\tDeleting `{:?}`...\", f); // and inform the user","class":"lineCov","hits":"1","order":"326",},
{"lineNum":"  129","line":"            self.vfs.rm_file(f).expect(\"Couldn\'t delete file\");","class":"lineCov","hits":"1","order":"327",},
{"lineNum":"  130","line":"            // delete vfs handles logging and error printing in the case of errors"},
{"lineNum":"  131","line":"            save_size += size; //and increment the amount of space freed","class":"lineCov","hits":"1","order":"329",},
{"lineNum":"  132","line":"        }"},
{"lineNum":"  133","line":"        //log the amount of space freed"},
{"lineNum":"  134","line":"        info!(\"You saved {} bytes by deduplicating this file\", save_size);","class":"lineCov","hits":"1","order":"335",},
{"lineNum":"  135","line":"        println!(\"You saved {} bytes by deduplicating this file\", save_size); // and inform the user","class":"lineCov","hits":"1","order":"340",},
{"lineNum":"  136","line":"    }","class":"lineCov","hits":"1","order":"342",},
{"lineNum":"  137","line":"}"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"// implement `act()` for a FileLinker"},
{"lineNum":"  140","line":"impl<V: VFS, S: Selector<V>> FileActor<V, S> for FileLinker<V, S> {"},
{"lineNum":"  141","line":"    /// <FileLinker<V, S> as FileActor<V, S> >.act(), we print which file"},
{"lineNum":"  142","line":"    /// is the \'original\' and which have been replaced with hardlinks to"},
{"lineNum":"  143","line":"    /// the that file (and are thus effectively that file), along with"},
{"lineNum":"  144","line":"    /// how much space has been freed."},
{"lineNum":"  145","line":"    fn act(&mut self, dups: Duplicates) {","class":"lineCov","hits":"1","order":"206",},
{"lineNum":"  146","line":"        // Select the File:","class":"lineCov","hits":"1","order":"207",},
{"lineNum":"  147","line":"        // get the file, metadata, size, and device from the vfs"},
{"lineNum":"  148","line":"        let real = self.selector.select(&dups);","class":"lineCov","hits":"1","order":"208",},
{"lineNum":"  149","line":"        let real_file = self.vfs.get_file(real).expect(\"Couldn\'t find link dst\");","class":"lineCov","hits":"1","order":"209",},
{"lineNum":"  150","line":"        let real_md = real_file.get_metadata().expect(\"Couldn\'t get link dst md\");","class":"lineCov","hits":"1","order":"210",},
{"lineNum":"  151","line":"        let real_dev = real_md.get_device().expect(\"Couldn\'t get link dst device\");","class":"lineCov","hits":"1","order":"214",},
{"lineNum":"  152","line":"        let size = real_md.get_len();","class":"lineCov","hits":"1","order":"215",},
{"lineNum":"  153","line":"        let mut save_size = 0;","class":"lineCov","hits":"1","order":"216",},
{"lineNum":"  154","line":"        info!(\"`{:?}` is the true file\", real); //log the \'real\' file","class":"lineCov","hits":"1","order":"217",},
{"lineNum":"  155","line":"        println!(\"`{:?}` is the true file\", real); //and inform the user"},
{"lineNum":"  156","line":"                                                   // iterate over all other duplicates","class":"lineCov","hits":"1","order":"218",},
{"lineNum":"  157","line":"        for f in dups.0.iter().filter(|&f| f.as_path() != real) {"},
{"lineNum":"  158","line":"            // Check that we can create a hardlink","class":"lineCov","hits":"1","order":"219",},
{"lineNum":"  159","line":"            let f_dir = f.parent().unwrap(); // can\'t be a dir so can\'t be \"/\"","class":"lineCov","hits":"1","order":"220",},
{"lineNum":"  160","line":"            let f_dir_file = self.vfs"},
{"lineNum":"  161","line":"                .get_file(f_dir)"},
{"lineNum":"  162","line":"                .expect(\"Couldn\'t find link src parent\");","class":"lineCov","hits":"1","order":"221",},
{"lineNum":"  163","line":"            let f_dir_md = f_dir_file"},
{"lineNum":"  164","line":"                .get_metadata()","class":"lineNoCov","hits":"0",},
{"lineNum":"  165","line":"                .expect(\"Couldn\'t get link src parent md\");","class":"lineCov","hits":"1","order":"222",},
{"lineNum":"  166","line":"            let f_dir_dev = f_dir_md"},
{"lineNum":"  167","line":"                .get_device()","class":"lineNoCov","hits":"0",},
{"lineNum":"  168","line":"                .expect(\"Couldn\'t get link src parent device\");"},
{"lineNum":"  169","line":"            // If not, inform the user.","class":"lineCov","hits":"1","order":"223",},
{"lineNum":"  170","line":"            if real_dev != f_dir_dev {","class":"lineCov","hits":"1","order":"226",},
{"lineNum":"  171","line":"                warn!("},
{"lineNum":"  172","line":"                    \"You tried to create a link from directory `{:?}` on device {:?} \\"},
{"lineNum":"  173","line":"                     to the file `{:?}` on device {:?}.\\n\\"},
{"lineNum":"  174","line":"                     Hard-linking across devices is generally an error. \\"},
{"lineNum":"  175","line":"                     Skipping...\","},
{"lineNum":"  176","line":"                    f_dir,"},
{"lineNum":"  177","line":"                    f_dir_dev,"},
{"lineNum":"  178","line":"                    real,"},
{"lineNum":"  179","line":"                    real_dev"},
{"lineNum":"  180","line":"                );"},
{"lineNum":"  181","line":"            } else {"},
{"lineNum":"  182","line":"                //If we can, log and print that we are deleting of the file","class":"lineCov","hits":"1","order":"256",},
{"lineNum":"  183","line":"                info!(\"\\tDeleting `{:?}`...\", f);","class":"lineCov","hits":"1","order":"257",},
{"lineNum":"  184","line":"                println!(\"\\tDeleting `{:?}`...\", f);"},
{"lineNum":"  185","line":"                //And deleting it.","class":"lineCov","hits":"1","order":"258",},
{"lineNum":"  186","line":"                self.vfs.rm_file(f).expect(\"Couldn\'t delete file\");"},
{"lineNum":"  187","line":"                //log and print that we are replacing it with a link","class":"lineCov","hits":"1","order":"264",},
{"lineNum":"  188","line":"                info!(\"\\t\\tand replacing it with a link to `{:?}`...\", real);","class":"lineCov","hits":"1","order":"265",},
{"lineNum":"  189","line":"                println!(\"\\t\\tand replacing it with a link to `{:?}`...\", real);"},
{"lineNum":"  190","line":"                //and link.","class":"lineCov","hits":"1","order":"266",},
{"lineNum":"  191","line":"                self.vfs.make_link(f, real).expect(\"Couldn\'t create link\");"},
{"lineNum":"  192","line":"                //and increment the amount of space we save","class":"lineCov","hits":"1","order":"291",},
{"lineNum":"  193","line":"                save_size += size;"},
{"lineNum":"  194","line":"            }","class":"lineCov","hits":"1","order":"227",},
{"lineNum":"  195","line":"        }"},
{"lineNum":"  196","line":"        // and log and print how much space was saved","class":"lineCov","hits":"1","order":"228",},
{"lineNum":"  197","line":"        info!(\"You saved {} bytes by deduplicating this file\", save_size);","class":"lineCov","hits":"1","order":"229",},
{"lineNum":"  198","line":"        println!(\"You saved {} bytes by deduplicating this file\", save_size);","class":"lineCov","hits":"1","order":"230",},
{"lineNum":"  199","line":"    }"},
{"lineNum":"  200","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "smllr-cd1387de2be9f35d", "date" : "2017-11-27 19:54:30", "instrumented" : 75, "covered" : 73,};
var merged_data = [];
