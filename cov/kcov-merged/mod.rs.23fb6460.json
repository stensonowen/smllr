var data = {lines:[
{"lineNum":"    1","line":"// This file defines a number of traits and helper"},
{"lineNum":"    2","line":"// for filesystem interface used for dependancy injection."},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"use std::{fs, io, time};"},
{"lineNum":"    5","line":"use std::fmt::Debug;"},
{"lineNum":"    6","line":"use std::path::{Path, PathBuf};"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"mod real_fs;"},
{"lineNum":"    9","line":"pub use self::real_fs::RealFileSystem;"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"mod test_fs;"},
{"lineNum":"   12","line":"pub use self::test_fs::{TestFile, TestFileSystem, TestMD};"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"use super::{FirstBytes, Hash, FIRST_K_BYTES};"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"//definition of traits"},
{"lineNum":"   17","line":"//RUST NOTE: the \"trait foo: baz\" denotes that foo reuires that"},
{"lineNum":"   18","line":"// any object it is implemented on also implements baz."},
{"lineNum":"   19","line":"// this allows the default implementation of methods to"},
{"lineNum":"   20","line":"// employ the methods of baz"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"/// The VFS [virtual file system] trait is the interface we require"},
{"lineNum":"   23","line":"/// for the injection into the directectory walker."},
{"lineNum":"   24","line":"pub trait VFS: Clone + Debug {"},
{"lineNum":"   25","line":"    type FileIter: File;"},
{"lineNum":"   26","line":"    /// Recursively enumerate all files beneath a given path"},
{"lineNum":"   27","line":"    fn list_dir<P: AsRef<Path>>("},
{"lineNum":"   28","line":"        &self,"},
{"lineNum":"   29","line":"        p: P,"},
{"lineNum":"   30","line":"    ) -> io::Result<Box<Iterator<Item = io::Result<Self::FileIter>>>>;"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"    /// Get the metadata of a file (follows symlinks)"},
{"lineNum":"   33","line":"    fn get_metadata<P: AsRef<Path>>(&self, p: P) -> io::Result<<Self::FileIter as File>::MD>;"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"    /// Get the metadata of a file (doesn\'t follow symlinks)"},
{"lineNum":"   36","line":"    fn get_symlink_metadata<P: AsRef<Path>>("},
{"lineNum":"   37","line":"        &self,"},
{"lineNum":"   38","line":"        p: P,"},
{"lineNum":"   39","line":"    ) -> io::Result<<Self::FileIter as File>::MD>;"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"    /// Resolve a link path to the path of its target"},
{"lineNum":"   42","line":"    fn read_link<P: AsRef<Path>>(&self, p: P) -> io::Result<PathBuf>;"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    // must be of type \"File\" (not a dir/link/other)"},
{"lineNum":"   45","line":"    /// Get a File handle from a path"},
{"lineNum":"   46","line":"    fn get_file(&self, p: &Path) -> io::Result<Self::FileIter>;"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    // must be of type \"File\" (not a dir/link/other)"},
{"lineNum":"   49","line":"    /// Delete a file"},
{"lineNum":"   50","line":"    fn rm_file<P: AsRef<Path>>(&mut self, p: &P) -> io::Result<()>;"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    // create"},
{"lineNum":"   53","line":"    /// Create a haard link at `src` pointing to what\'s at `dst`"},
{"lineNum":"   54","line":"    fn make_link(&mut self, src: &Path, dst: &Path) -> io::Result<()>;"},
{"lineNum":"   55","line":"}"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"// the File trait defines the common interface for files."},
{"lineNum":"   58","line":"pub trait File: Debug {"},
{"lineNum":"   59","line":"    type MD: MetaData;"},
{"lineNum":"   60","line":"    fn get_inode(&self) -> io::Result<Inode>;"},
{"lineNum":"   61","line":"    fn get_path(&self) -> PathBuf;"},
{"lineNum":"   62","line":"    fn get_type(&self) -> io::Result<FileType>;"},
{"lineNum":"   63","line":"    fn get_metadata(&self) -> io::Result<Self::MD>;"},
{"lineNum":"   64","line":"    /// Read first K bytes of the file"},
{"lineNum":"   65","line":"    fn get_first_bytes(&self) -> io::Result<FirstBytes>;"},
{"lineNum":"   66","line":"    /// Hash the contents of the file"},
{"lineNum":"   67","line":"    fn get_hash(&self) -> io::Result<Hash>;"},
{"lineNum":"   68","line":"}"},
{"lineNum":"   69","line":"// the MetaData trait defines the interface for metadata"},
{"lineNum":"   70","line":"// it is the subset of the interface of fs::MetaData that we use"},
{"lineNum":"   71","line":"pub trait MetaData: Debug {"},
{"lineNum":"   72","line":"    fn get_len(&self) -> u64;"},
{"lineNum":"   73","line":"    fn get_creation_time(&self) -> io::Result<time::SystemTime>;"},
{"lineNum":"   74","line":"    fn get_type(&self) -> FileType;"},
{"lineNum":"   75","line":"    fn get_inode(&self) -> Inode;"},
{"lineNum":"   76","line":"    fn get_device(&self) -> io::Result<DeviceId>;"},
{"lineNum":"   77","line":"}"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"// helper types"},
{"lineNum":"   81","line":"//RUST NOTE: rust enums can be defined over types such that"},
{"lineNum":"   82","line":"//a variable of the the enum type can be of any of the included types."},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"/// `Filetype` is an enum of all types used for filesystem objects."},
{"lineNum":"   85","line":"#[derive(Debug, Clone, Copy, PartialEq)]","class":"lineCov","hits":"1","order":"54",},
{"lineNum":"   86","line":"pub enum FileType {"},
{"lineNum":"   87","line":"    File,"},
{"lineNum":"   88","line":"    Dir,"},
{"lineNum":"   89","line":"    Symlink,"},
{"lineNum":"   90","line":"    Other,"},
{"lineNum":"   91","line":"}"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"/// Implementation of creation method for the `FileType` enum."},
{"lineNum":"   94","line":"/// maps creation (from) method over the constitute types of `FileType`"},
{"lineNum":"   95","line":"impl From<fs::FileType> for FileType {"},
{"lineNum":"   96","line":"    fn from(ft: fs::FileType) -> FileType {"},
{"lineNum":"   97","line":"        if ft.is_file() {"},
{"lineNum":"   98","line":"            FileType::File"},
{"lineNum":"   99","line":"        } else if ft.is_dir() {"},
{"lineNum":"  100","line":"            FileType::Dir"},
{"lineNum":"  101","line":"        } else if ft.is_symlink() {"},
{"lineNum":"  102","line":"            FileType::Symlink"},
{"lineNum":"  103","line":"        } else {"},
{"lineNum":"  104","line":"            // for other filesystem objets. might be block/char device, fifo,"},
{"lineNum":"  105","line":"            // socket, etc depending on os"},
{"lineNum":"  106","line":"            FileType::Other"},
{"lineNum":"  107","line":"        }"},
{"lineNum":"  108","line":"    }"},
{"lineNum":"  109","line":"}"},
{"lineNum":"  110","line":"//RUST NOTE: the #[derive(...)] automatically adds the traits indicated in derive"},
{"lineNum":"  111","line":"// one should also note that Clone, Copy, Hash, PartialEQ, and EQ are part of the rust"},
{"lineNum":"  112","line":"// std and do pretty much what it they say."},
{"lineNum":"  113","line":"/// Inode is wraper around a \'long\' with several added traits (interface)"},
{"lineNum":"  114","line":"/// which represents the inode of a file"},
{"lineNum":"  115","line":"#[derive(Debug, Clone, Copy, Hash, PartialEq, Eq)]","class":"lineCov","hits":"1","order":"108",},
{"lineNum":"  116","line":"pub struct Inode(pub u64);","class":"lineCov","hits":"1","order":"187",},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"/// `DeviceId` is a wraper around a \'long\' with several traits"},
{"lineNum":"  119","line":"/// represents a device id."},
{"lineNum":"  120","line":"#[derive(Debug, Clone, Copy, PartialEq)]","class":"lineCov","hits":"1","order":"224",},
{"lineNum":"  121","line":"pub struct DeviceId(pub u64);","class":"lineCov","hits":"1","order":"225",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "smllr-cd1387de2be9f35d", "date" : "2017-11-27 19:54:30", "instrumented" : 5, "covered" : 5,};
var merged_data = [];
