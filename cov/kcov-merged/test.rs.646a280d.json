var data = {lines:[
{"lineNum":"    1","line":"#[cfg(test)]"},
{"lineNum":"    2","line":"mod test {"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"    use vfs::{TestFile, TestFileSystem, TestMD};"},
{"lineNum":"    5","line":"    use catalog::FileCataloger;"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"    use std::path::PathBuf;"},
{"lineNum":"    8","line":"    use std::collections::HashSet;"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"    #[test]"},
{"lineNum":"   11","line":"    fn dup_all_unique() {","class":"lineCov","hits":"1","order":"481",},
{"lineNum":"   12","line":"        // completely distinct files should not be flagged as duplicates"},
{"lineNum":"   13","line":"        // they share no criteria in common (inode/size/hash/beginning)"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"        let fs = TestFileSystem::new();","class":"lineCov","hits":"1","order":"482",},
{"lineNum":"   16","line":"        {","class":"lineNoCov","hits":"0",},
{"lineNum":"   17","line":"            let mut fs = fs.borrow_mut();","class":"lineCov","hits":"1","order":"483",},
{"lineNum":"   18","line":"            fs.create_dir(\"/\");","class":"lineCov","hits":"1","order":"484",},
{"lineNum":"   19","line":"            fs.add(","class":"lineCov","hits":"1","order":"485",},
{"lineNum":"   20","line":"                TestFile::new(\"/a\")","class":"lineCov","hits":"1","order":"486",},
{"lineNum":"   21","line":"                    .with_contents(String::from(\"A\"))","class":"lineCov","hits":"1","order":"487",},
{"lineNum":"   22","line":"                    .with_metadata(TestMD::new())","class":"lineCov","hits":"1","order":"488",},
{"lineNum":"   23","line":"                    .with_inode(1),"},
{"lineNum":"   24","line":"            );"},
{"lineNum":"   25","line":"            fs.add(","class":"lineCov","hits":"1","order":"489",},
{"lineNum":"   26","line":"                TestFile::new(\"/b\")","class":"lineCov","hits":"1","order":"490",},
{"lineNum":"   27","line":"                    .with_contents(String::from(\"BB\"))","class":"lineCov","hits":"1","order":"493",},
{"lineNum":"   28","line":"                    .with_metadata(TestMD::new())","class":"lineCov","hits":"1","order":"495",},
{"lineNum":"   29","line":"                    .with_inode(2),"},
{"lineNum":"   30","line":"            );"},
{"lineNum":"   31","line":"            fs.add(","class":"lineCov","hits":"1","order":"497",},
{"lineNum":"   32","line":"                TestFile::new(\"/c\")","class":"lineCov","hits":"1","order":"499",},
{"lineNum":"   33","line":"                    .with_contents(String::from(\"CCC\"))","class":"lineCov","hits":"1","order":"501",},
{"lineNum":"   34","line":"                    .with_metadata(TestMD::new())","class":"lineCov","hits":"1","order":"504",},
{"lineNum":"   35","line":"                    .with_inode(3),"},
{"lineNum":"   36","line":"            );"},
{"lineNum":"   37","line":"        }","class":"lineCov","hits":"1","order":"506",},
{"lineNum":"   38","line":"        let files: HashSet<_> = vec![\"/a\", \"/b\", \"/c\"].iter().map(PathBuf::from).collect();","class":"lineCov","hits":"1","order":"508",},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"        let mut fc = FileCataloger::new(fs);","class":"lineCov","hits":"1","order":"732",},
{"lineNum":"   41","line":"        for file in &files {","class":"lineCov","hits":"1","order":"733",},
{"lineNum":"   42","line":"            fc.insert(file);","class":"lineCov","hits":"1","order":"734",},
{"lineNum":"   43","line":"        }"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"        let repeats = fc.get_repeats();","class":"lineCov","hits":"1","order":"735",},
{"lineNum":"   46","line":"        assert!(repeats.is_empty());","class":"lineCov","hits":"1","order":"737",},
{"lineNum":"   47","line":"    }","class":"lineCov","hits":"1","order":"738",},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    #[test]"},
{"lineNum":"   50","line":"    fn dup_test_same_size() {","class":"lineCov","hits":"1","order":"435",},
{"lineNum":"   51","line":"        // files with the same length but different contents"},
{"lineNum":"   52","line":"        // files should not be flagged as duplicates"},
{"lineNum":"   53","line":"        let fs = TestFileSystem::new();","class":"lineCov","hits":"1","order":"437",},
{"lineNum":"   54","line":"        {","class":"lineNoCov","hits":"0",},
{"lineNum":"   55","line":"            let mut fs = fs.borrow_mut();","class":"lineCov","hits":"1","order":"462",},
{"lineNum":"   56","line":"            fs.create_dir(\"/\");","class":"lineCov","hits":"1","order":"464",},
{"lineNum":"   57","line":"            fs.add(","class":"lineCov","hits":"1","order":"465",},
{"lineNum":"   58","line":"                TestFile::new(\"/a\")","class":"lineCov","hits":"1","order":"467",},
{"lineNum":"   59","line":"                    .with_contents(String::from(\"AAAA\"))","class":"lineCov","hits":"1","order":"468",},
{"lineNum":"   60","line":"                    .with_metadata(TestMD::new())","class":"lineCov","hits":"1","order":"469",},
{"lineNum":"   61","line":"                    .with_inode(1),"},
{"lineNum":"   62","line":"            );"},
{"lineNum":"   63","line":"            fs.add(","class":"lineCov","hits":"1","order":"471",},
{"lineNum":"   64","line":"                TestFile::new(\"/b\")","class":"lineCov","hits":"1","order":"472",},
{"lineNum":"   65","line":"                    .with_contents(String::from(\"BBBB\"))","class":"lineCov","hits":"1","order":"473",},
{"lineNum":"   66","line":"                    .with_metadata(TestMD::new())","class":"lineCov","hits":"1","order":"474",},
{"lineNum":"   67","line":"                    .with_inode(2),"},
{"lineNum":"   68","line":"            );"},
{"lineNum":"   69","line":"            fs.add(","class":"lineCov","hits":"1","order":"475",},
{"lineNum":"   70","line":"                TestFile::new(\"/c\")","class":"lineCov","hits":"1","order":"476",},
{"lineNum":"   71","line":"                    .with_contents(String::from(\"CCCC\"))","class":"lineCov","hits":"1","order":"477",},
{"lineNum":"   72","line":"                    .with_metadata(TestMD::new())","class":"lineCov","hits":"1","order":"478",},
{"lineNum":"   73","line":"                    .with_inode(3),"},
{"lineNum":"   74","line":"            );"},
{"lineNum":"   75","line":"        }","class":"lineCov","hits":"1","order":"479",},
{"lineNum":"   76","line":"        let files: HashSet<_> = vec![\"/a\", \"/b\", \"/c\"].iter().map(PathBuf::from).collect();","class":"lineCov","hits":"1","order":"480",},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"        let mut fc = FileCataloger::new(fs);","class":"lineCov","hits":"1","order":"513",},
{"lineNum":"   79","line":"        for file in &files {","class":"lineCov","hits":"1","order":"519",},
{"lineNum":"   80","line":"            fc.insert(file);","class":"lineCov","hits":"1","order":"520",},
{"lineNum":"   81","line":"        }"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"        let repeats = fc.get_repeats();","class":"lineCov","hits":"1","order":"596",},
{"lineNum":"   84","line":"        assert!(repeats.is_empty());","class":"lineCov","hits":"1","order":"618",},
{"lineNum":"   85","line":"    }","class":"lineCov","hits":"1","order":"619",},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"    #[test]"},
{"lineNum":"   88","line":"    fn dup_test_same_start() {","class":"lineCov","hits":"1","order":"652",},
{"lineNum":"   89","line":"        // files with the same length and first k bytes but different contents"},
{"lineNum":"   90","line":"        // files should not be flagged as duplicates"},
{"lineNum":"   91","line":"        let fs = TestFileSystem::new();","class":"lineCov","hits":"1","order":"653",},
{"lineNum":"   92","line":"        {","class":"lineNoCov","hits":"0",},
{"lineNum":"   93","line":"            let mut fs = fs.borrow_mut();","class":"lineCov","hits":"1","order":"656",},
{"lineNum":"   94","line":"            fs.create_dir(\"/\");","class":"lineCov","hits":"1","order":"657",},
{"lineNum":"   95","line":"            let start: String = ::std::iter::repeat(\'A\').take(4096).collect();","class":"lineCov","hits":"1","order":"658",},
{"lineNum":"   96","line":"            fs.add(","class":"lineCov","hits":"1","order":"659",},
{"lineNum":"   97","line":"                TestFile::new(\"/a\")","class":"lineCov","hits":"1","order":"660",},
{"lineNum":"   98","line":"                    .with_contents(format!(\"{}_a\", start))","class":"lineCov","hits":"1","order":"661",},
{"lineNum":"   99","line":"                    .with_metadata(TestMD::new())","class":"lineCov","hits":"1","order":"665",},
{"lineNum":"  100","line":"                    .with_inode(1),"},
{"lineNum":"  101","line":"            );"},
{"lineNum":"  102","line":"            fs.add(","class":"lineCov","hits":"1","order":"666",},
{"lineNum":"  103","line":"                TestFile::new(\"/b\")","class":"lineCov","hits":"1","order":"667",},
{"lineNum":"  104","line":"                    .with_contents(format!(\"{}_b\", start))","class":"lineCov","hits":"1","order":"668",},
{"lineNum":"  105","line":"                    .with_metadata(TestMD::new())","class":"lineCov","hits":"1","order":"669",},
{"lineNum":"  106","line":"                    .with_inode(2),"},
{"lineNum":"  107","line":"            );"},
{"lineNum":"  108","line":"            fs.add(","class":"lineCov","hits":"1","order":"670",},
{"lineNum":"  109","line":"                TestFile::new(\"/c\")","class":"lineCov","hits":"1","order":"671",},
{"lineNum":"  110","line":"                    .with_contents(format!(\"{}_c\", start))","class":"lineCov","hits":"1","order":"672",},
{"lineNum":"  111","line":"                    .with_metadata(TestMD::new())","class":"lineCov","hits":"1","order":"673",},
{"lineNum":"  112","line":"                    .with_inode(3),"},
{"lineNum":"  113","line":"            );"},
{"lineNum":"  114","line":"        }","class":"lineCov","hits":"1","order":"674",},
{"lineNum":"  115","line":"        let files: HashSet<_> = vec![\"/a\", \"/b\", \"/c\"].iter().map(PathBuf::from).collect();","class":"lineCov","hits":"1","order":"675",},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"        let mut fc = FileCataloger::new(fs);","class":"lineCov","hits":"1","order":"676",},
{"lineNum":"  118","line":"        for file in &files {","class":"lineCov","hits":"1","order":"677",},
{"lineNum":"  119","line":"            fc.insert(file);","class":"lineCov","hits":"1","order":"678",},
{"lineNum":"  120","line":"        }"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"        let repeats = fc.get_repeats();","class":"lineCov","hits":"1","order":"702",},
{"lineNum":"  123","line":"        assert!(repeats.is_empty());","class":"lineCov","hits":"1","order":"708",},
{"lineNum":"  124","line":"    }","class":"lineCov","hits":"1","order":"709",},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"    #[test]"},
{"lineNum":"  127","line":"    fn dup_test_same_contents() {","class":"lineCov","hits":"1","order":"438",},
{"lineNum":"  128","line":"        // unlinked files with the same contents should be flagged as duplicates"},
{"lineNum":"  129","line":"        let fs = TestFileSystem::new();","class":"lineCov","hits":"1","order":"440",},
{"lineNum":"  130","line":"        {","class":"lineNoCov","hits":"0",},
{"lineNum":"  131","line":"            let mut fs = fs.borrow_mut();","class":"lineCov","hits":"1","order":"441",},
{"lineNum":"  132","line":"            fs.create_dir(\"/\");","class":"lineCov","hits":"1","order":"442",},
{"lineNum":"  133","line":"            let contents: String = ::std::iter::repeat(\'A\').take(4096).collect();","class":"lineCov","hits":"1","order":"443",},
{"lineNum":"  134","line":"            fs.add(","class":"lineCov","hits":"1","order":"491",},
{"lineNum":"  135","line":"                TestFile::new(\"/a\")","class":"lineCov","hits":"1","order":"492",},
{"lineNum":"  136","line":"                    .with_contents(contents.clone())","class":"lineCov","hits":"1","order":"494",},
{"lineNum":"  137","line":"                    .with_metadata(TestMD::new())","class":"lineCov","hits":"1","order":"496",},
{"lineNum":"  138","line":"                    .with_inode(1),"},
{"lineNum":"  139","line":"            );"},
{"lineNum":"  140","line":"            fs.add(","class":"lineCov","hits":"1","order":"498",},
{"lineNum":"  141","line":"                TestFile::new(\"/b\")","class":"lineCov","hits":"1","order":"500",},
{"lineNum":"  142","line":"                    .with_contents(contents.clone())","class":"lineCov","hits":"1","order":"502",},
{"lineNum":"  143","line":"                    .with_metadata(TestMD::new())","class":"lineCov","hits":"1","order":"503",},
{"lineNum":"  144","line":"                    .with_inode(2),"},
{"lineNum":"  145","line":"            );"},
{"lineNum":"  146","line":"            fs.add(","class":"lineCov","hits":"1","order":"505",},
{"lineNum":"  147","line":"                TestFile::new(\"/c\")","class":"lineCov","hits":"1","order":"507",},
{"lineNum":"  148","line":"                    .with_contents(contents)","class":"lineCov","hits":"1","order":"509",},
{"lineNum":"  149","line":"                    .with_metadata(TestMD::new())","class":"lineCov","hits":"1","order":"510",},
{"lineNum":"  150","line":"                    .with_inode(3),"},
{"lineNum":"  151","line":"            );"},
{"lineNum":"  152","line":"        }","class":"lineCov","hits":"1","order":"511",},
{"lineNum":"  153","line":"        let files: HashSet<_> = vec![\"/a\", \"/b\", \"/c\"].iter().map(PathBuf::from).collect();","class":"lineCov","hits":"1","order":"512",},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"        let mut fc = FileCataloger::new(fs);","class":"lineCov","hits":"1","order":"620",},
{"lineNum":"  156","line":"        for file in &files {","class":"lineCov","hits":"1","order":"621",},
{"lineNum":"  157","line":"            fc.insert(file);","class":"lineCov","hits":"1","order":"622",},
{"lineNum":"  158","line":"        }"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"        let repeats = fc.get_repeats();","class":"lineCov","hits":"1","order":"697",},
{"lineNum":"  161","line":"        assert_eq!(1, repeats.len());","class":"lineCov","hits":"1","order":"710",},
{"lineNum":"  162","line":"        let dups = &repeats[0].0;","class":"lineCov","hits":"1","order":"711",},
{"lineNum":"  163","line":"        assert_eq!(3, dups.len());","class":"lineCov","hits":"1","order":"712",},
{"lineNum":"  164","line":"        assert!(dups.contains(&PathBuf::from(\"/a\")));","class":"lineCov","hits":"1","order":"713",},
{"lineNum":"  165","line":"        assert!(dups.contains(&PathBuf::from(\"/b\")));","class":"lineCov","hits":"1","order":"714",},
{"lineNum":"  166","line":"    }","class":"lineCov","hits":"1","order":"715",},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    #[test]"},
{"lineNum":"  169","line":"    fn dup_test_hard_links() {","class":"lineCov","hits":"1","order":"436",},
{"lineNum":"  170","line":"        // hard links to the same file should be flagged as duplicates"},
{"lineNum":"  171","line":"        // even if they (somehow) have different contents"},
{"lineNum":"  172","line":"        let fs = TestFileSystem::new();","class":"lineCov","hits":"1","order":"439",},
{"lineNum":"  173","line":"        {","class":"lineNoCov","hits":"0",},
{"lineNum":"  174","line":"            let mut fs = fs.borrow_mut();","class":"lineCov","hits":"1","order":"444",},
{"lineNum":"  175","line":"            fs.create_dir(\"/\");","class":"lineCov","hits":"1","order":"445",},
{"lineNum":"  176","line":"            // note that all test files passed to FileCataloger must have metadata"},
{"lineNum":"  177","line":"            fs.add(","class":"lineCov","hits":"1","order":"446",},
{"lineNum":"  178","line":"                TestFile::new(\"/a\")","class":"lineCov","hits":"1","order":"447",},
{"lineNum":"  179","line":"                    .with_inode(1)","class":"lineCov","hits":"1","order":"448",},
{"lineNum":"  180","line":"                    .with_contents(String::from(\"AAAA\"))","class":"lineCov","hits":"1","order":"449",},
{"lineNum":"  181","line":"                    .with_metadata(TestMD::new()),","class":"lineCov","hits":"1","order":"455",},
{"lineNum":"  182","line":"            );"},
{"lineNum":"  183","line":"            fs.add(","class":"lineCov","hits":"1","order":"457",},
{"lineNum":"  184","line":"                TestFile::new(\"/b\")","class":"lineCov","hits":"1","order":"458",},
{"lineNum":"  185","line":"                    .with_inode(1)","class":"lineCov","hits":"1","order":"459",},
{"lineNum":"  186","line":"                    .with_contents(String::from(\"BBBB\"))","class":"lineCov","hits":"1","order":"460",},
{"lineNum":"  187","line":"                    .with_metadata(TestMD::new()),","class":"lineCov","hits":"1","order":"461",},
{"lineNum":"  188","line":"            );"},
{"lineNum":"  189","line":"        }","class":"lineCov","hits":"1","order":"463",},
{"lineNum":"  190","line":"        let files: HashSet<_> = vec![\"/a\", \"/b\"].iter().map(PathBuf::from).collect();","class":"lineCov","hits":"1","order":"466",},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"        let mut fc = FileCataloger::new(fs);","class":"lineCov","hits":"1","order":"716",},
{"lineNum":"  193","line":"        for file in &files {","class":"lineCov","hits":"1","order":"717",},
{"lineNum":"  194","line":"            fc.insert(file);","class":"lineCov","hits":"1","order":"718",},
{"lineNum":"  195","line":"        }"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"        let repeats = fc.get_repeats();","class":"lineCov","hits":"1","order":"723",},
{"lineNum":"  198","line":"        assert_eq!(1, repeats.len());","class":"lineCov","hits":"1","order":"726",},
{"lineNum":"  199","line":"        let dup = &repeats[0].0;","class":"lineCov","hits":"1","order":"727",},
{"lineNum":"  200","line":"        assert_eq!(2, dup.len());","class":"lineCov","hits":"1","order":"728",},
{"lineNum":"  201","line":"        assert!(dup.contains(&PathBuf::from(\"/a\")));","class":"lineCov","hits":"1","order":"729",},
{"lineNum":"  202","line":"        assert!(dup.contains(&PathBuf::from(\"/b\")));","class":"lineCov","hits":"1","order":"730",},
{"lineNum":"  203","line":"    }","class":"lineCov","hits":"1","order":"731",},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "smllr-cd1387de2be9f35d", "date" : "2017-11-27 19:54:30", "instrumented" : 133, "covered" : 128,};
var merged_data = [];
