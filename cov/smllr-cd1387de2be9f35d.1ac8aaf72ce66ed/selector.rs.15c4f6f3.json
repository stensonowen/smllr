var data = {lines:[
{"lineNum":"    1","line":"use std::cmp::Ordering;"},
{"lineNum":"    2","line":"use std::path::Path;"},
{"lineNum":"    3","line":"use std::marker::PhantomData;"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"use vfs::{File, MetaData, VFS};"},
{"lineNum":"    6","line":"use catalog::proxy::Duplicates;"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"/// Interface for choosing between files"},
{"lineNum":"    9","line":"pub trait Selector<V: VFS> {"},
{"lineNum":"   10","line":"    // indicate that you want the max instead of the min or vice versa"},
{"lineNum":"   11","line":"    fn reverse(&mut self);"},
{"lineNum":"   12","line":"    // choose which of the Paths in Duplicates is the \"true\" (unchanged) one"},
{"lineNum":"   13","line":"    fn select<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path;"},
{"lineNum":"   14","line":"    // helpers to be called by select"},
{"lineNum":"   15","line":"    fn min<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path;"},
{"lineNum":"   16","line":"    fn max<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path;"},
{"lineNum":"   17","line":"}"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"/// Choose between files based on their path"},
{"lineNum":"   20","line":"pub struct PathSelect<V: VFS> {"},
{"lineNum":"   21","line":"    reverse: bool,"},
{"lineNum":"   22","line":"    vfs: PhantomData<V>, // must be generic over VFS but don\'t need as field"},
{"lineNum":"   23","line":"}"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/// Chose between files based on their creation date"},
{"lineNum":"   26","line":"pub struct DateSelect<V: VFS> {"},
{"lineNum":"   27","line":"    reverse: bool,"},
{"lineNum":"   28","line":"    vfs: V,"},
{"lineNum":"   29","line":"}"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"// constructor for PathSelect"},
{"lineNum":"   32","line":"impl<V: VFS> PathSelect<V> {"},
{"lineNum":"   33","line":"    pub fn new(_: V) -> Self {","class":"lineCov","hits":"1","order":"3219","possible_hits":"1",},
{"lineNum":"   34","line":"        PathSelect {","class":"lineCov","hits":"1","order":"3220","possible_hits":"1",},
{"lineNum":"   35","line":"            reverse: false,"},
{"lineNum":"   36","line":"            vfs: PhantomData,"},
{"lineNum":"   37","line":"        }"},
{"lineNum":"   38","line":"    }","class":"linePartCov","hits":"1","order":"3221","possible_hits":"2",},
{"lineNum":"   39","line":"}"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"// constructor for DateSelect"},
{"lineNum":"   42","line":"impl<V: VFS> DateSelect<V> {"},
{"lineNum":"   43","line":"    pub fn new(v: V) -> Self {","class":"lineCov","hits":"2","order":"4383","possible_hits":"2",},
{"lineNum":"   44","line":"        DateSelect {","class":"lineCov","hits":"1","order":"4385","possible_hits":"1",},
{"lineNum":"   45","line":"            reverse: false,"},
{"lineNum":"   46","line":"            vfs: v,","class":"lineCov","hits":"1","order":"4384","possible_hits":"1",},
{"lineNum":"   47","line":"        }"},
{"lineNum":"   48","line":"    }","class":"linePartCov","hits":"1","order":"4386","possible_hits":"2",},
{"lineNum":"   49","line":"}"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"// implement Selector for heap/trait objects"},
{"lineNum":"   52","line":"impl<V: VFS> Selector<V> for Box<Selector<V>> {"},
{"lineNum":"   53","line":"    fn reverse(&mut self) {"},
{"lineNum":"   54","line":"        (**self).reverse();"},
{"lineNum":"   55","line":"    }"},
{"lineNum":"   56","line":"    fn select<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path {"},
{"lineNum":"   57","line":"        (**self).select(dups)"},
{"lineNum":"   58","line":"    }"},
{"lineNum":"   59","line":"    fn min<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path {"},
{"lineNum":"   60","line":"        (**self).min(dups)"},
{"lineNum":"   61","line":"    }"},
{"lineNum":"   62","line":"    fn max<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path {"},
{"lineNum":"   63","line":"        (**self).max(dups)"},
{"lineNum":"   64","line":"    }"},
{"lineNum":"   65","line":"}"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"// implement Selector based on filepaths"},
{"lineNum":"   68","line":"impl<V: VFS> Selector<V> for PathSelect<V> {"},
{"lineNum":"   69","line":"    fn reverse(&mut self) {","class":"lineCov","hits":"2","order":"4113","possible_hits":"2",},
{"lineNum":"   70","line":"        self.reverse = true;","class":"lineCov","hits":"1","order":"4114","possible_hits":"1",},
{"lineNum":"   71","line":"    }","class":"linePartCov","hits":"1","order":"4115","possible_hits":"2",},
{"lineNum":"   72","line":"    fn select<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path {","class":"lineCov","hits":"2","order":"3239","possible_hits":"2",},
{"lineNum":"   73","line":"        // select the shallowest element (the path is the shortest)"},
{"lineNum":"   74","line":"        if self.reverse {","class":"lineCov","hits":"2","order":"3240","possible_hits":"2",},
{"lineNum":"   75","line":"            self.max(dups)","class":"lineCov","hits":"2","order":"4117","possible_hits":"2",},
{"lineNum":"   76","line":"        } else {"},
{"lineNum":"   77","line":"            self.min(dups)","class":"lineCov","hits":"2","order":"3241","possible_hits":"2",},
{"lineNum":"   78","line":"        }"},
{"lineNum":"   79","line":"    }","class":"linePartCov","hits":"1","order":"3279","possible_hits":"2",},
{"lineNum":"   80","line":"    // select the file closest to the root"},
{"lineNum":"   81","line":"    fn min<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path {","class":"lineCov","hits":"2","order":"3242","possible_hits":"2",},
{"lineNum":"   82","line":"        dups.0","class":"lineCov","hits":"1","order":"3243","possible_hits":"1",},
{"lineNum":"   83","line":"            .iter()"},
{"lineNum":"   84","line":"            .min_by(|&a_path, &b_path| {","class":"lineCov","hits":"2","order":"3255","possible_hits":"2",},
{"lineNum":"   85","line":"                let a_score = a_path.components().count();","class":"lineCov","hits":"1","order":"3256","possible_hits":"1",},
{"lineNum":"   86","line":"                let b_score = b_path.components().count();","class":"lineCov","hits":"1","order":"3267","possible_hits":"1",},
{"lineNum":"   87","line":"                a_score.cmp(&b_score)","class":"lineCov","hits":"1","order":"3268","possible_hits":"1",},
{"lineNum":"   88","line":"            })","class":"linePartCov","hits":"1","order":"3271","possible_hits":"2",},
{"lineNum":"   89","line":"            .unwrap() // is only None if `dups` is empty"},
{"lineNum":"   90","line":"    }","class":"linePartCov","hits":"1","order":"3278","possible_hits":"2",},
{"lineNum":"   91","line":"    // select the file farthest from the root"},
{"lineNum":"   92","line":"    fn max<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path {","class":"lineCov","hits":"2","order":"4118","possible_hits":"2",},
{"lineNum":"   93","line":"        dups.0","class":"lineCov","hits":"1","order":"4119","possible_hits":"1",},
{"lineNum":"   94","line":"            .iter()"},
{"lineNum":"   95","line":"            .max_by(|&a_path, &b_path| {","class":"lineCov","hits":"2","order":"4126","possible_hits":"2",},
{"lineNum":"   96","line":"                let a_score = a_path.components().count();","class":"lineCov","hits":"1","order":"4127","possible_hits":"1",},
{"lineNum":"   97","line":"                let b_score = b_path.components().count();","class":"lineCov","hits":"1","order":"4128","possible_hits":"1",},
{"lineNum":"   98","line":"                a_score.cmp(&b_score)","class":"lineCov","hits":"1","order":"4129","possible_hits":"1",},
{"lineNum":"   99","line":"            })","class":"linePartCov","hits":"1","order":"4130","possible_hits":"2",},
{"lineNum":"  100","line":"            .unwrap()"},
{"lineNum":"  101","line":"    }","class":"linePartCov","hits":"1","order":"4135","possible_hits":"2",},
{"lineNum":"  102","line":"}"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"// helper function for comparing two Files based on their date"},
{"lineNum":"  105","line":"fn date_cmp<\'a, T: File>(a: &\'a T, b: &\'a T) -> Ordering {","class":"linePartCov","hits":"2","order":"4407","possible_hits":"3",},
{"lineNum":"  106","line":"    let md_a = a.get_metadata().unwrap();","class":"lineCov","hits":"1","order":"4409","possible_hits":"1",},
{"lineNum":"  107","line":"    let md_b = b.get_metadata().unwrap();","class":"linePartCov","hits":"1","order":"4410","possible_hits":"2",},
{"lineNum":"  108","line":"    let date_a = md_a.get_creation_time().unwrap();","class":"linePartCov","hits":"1","order":"4412","possible_hits":"2",},
{"lineNum":"  109","line":"    let date_b = md_b.get_creation_time().unwrap();","class":"lineCov","hits":"1","order":"4420","possible_hits":"1",},
{"lineNum":"  110","line":"    date_a.cmp(&date_b)","class":"linePartCov","hits":"1","order":"4422","possible_hits":"2",},
{"lineNum":"  111","line":"}","class":"linePartCov","hits":"2","order":"4438","possible_hits":"4",},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"// implement Selector based on modification date"},
{"lineNum":"  114","line":"impl<V: VFS> Selector<V> for DateSelect<V> {"},
{"lineNum":"  115","line":"    fn reverse(&mut self) {","class":"lineCov","hits":"2","order":"4432","possible_hits":"2",},
{"lineNum":"  116","line":"        self.reverse = true;","class":"lineCov","hits":"1","order":"4433","possible_hits":"1",},
{"lineNum":"  117","line":"    }","class":"linePartCov","hits":"1","order":"4435","possible_hits":"2",},
{"lineNum":"  118","line":"    // select the file modified most recently"},
{"lineNum":"  119","line":"    fn min<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path {","class":"linePartCov","hits":"2","order":"4439","possible_hits":"3",},
{"lineNum":"  120","line":"        dups.0","class":"lineCov","hits":"3","order":"4440","possible_hits":"3",},
{"lineNum":"  121","line":"            .iter()"},
{"lineNum":"  122","line":"            .map(|path| (path, self.vfs.get_file(path).unwrap()))","class":"lineCov","hits":"3","order":"4441","possible_hits":"3",},
{"lineNum":"  123","line":"            .min_by(|&(_, ref a), &(_, ref b)| date_cmp(a, b))","class":"lineCov","hits":"2","order":"4446","possible_hits":"2",},
{"lineNum":"  124","line":"            .unwrap()"},
{"lineNum":"  125","line":"            .0"},
{"lineNum":"  126","line":"    }","class":"linePartCov","hits":"1","order":"4447","possible_hits":"2",},
{"lineNum":"  127","line":"    // select the file modified first"},
{"lineNum":"  128","line":"    fn max<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path {","class":"linePartCov","hits":"2","order":"4390","possible_hits":"3",},
{"lineNum":"  129","line":"        dups.0","class":"lineCov","hits":"3","order":"4391","possible_hits":"3",},
{"lineNum":"  130","line":"            .iter()"},
{"lineNum":"  131","line":"            .map(|path| (path, self.vfs.get_file(path).unwrap()))","class":"lineCov","hits":"3","order":"4392","possible_hits":"3",},
{"lineNum":"  132","line":"            .max_by(|&(_, ref a), &(_, ref b)| date_cmp(a, b))","class":"lineCov","hits":"2","order":"4405","possible_hits":"2",},
{"lineNum":"  133","line":"            .unwrap()"},
{"lineNum":"  134","line":"            .0"},
{"lineNum":"  135","line":"    }","class":"linePartCov","hits":"1","order":"4442","possible_hits":"2",},
{"lineNum":"  136","line":"    fn select<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path {","class":"lineCov","hits":"2","order":"4387","possible_hits":"2",},
{"lineNum":"  137","line":"        // select the newest element (the SystemTime is the largest)"},
{"lineNum":"  138","line":"        if self.reverse {","class":"lineCov","hits":"2","order":"4388","possible_hits":"2",},
{"lineNum":"  139","line":"            self.min(dups)","class":"lineCov","hits":"2","order":"4437","possible_hits":"2",},
{"lineNum":"  140","line":"        } else {"},
{"lineNum":"  141","line":"            self.max(dups)","class":"lineCov","hits":"2","order":"4389","possible_hits":"2",},
{"lineNum":"  142","line":"        }"},
{"lineNum":"  143","line":"    }","class":"linePartCov","hits":"1","order":"4443","possible_hits":"2",},
{"lineNum":"  144","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "smllr-cd1387de2be9f35d", "date" : "2017-11-27 19:54:30", "instrumented" : 56, "covered" : 56,};
var merged_data = [];
