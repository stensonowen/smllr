var data = {lines:[
{"lineNum":"    1","line":"use std::path::{Path, PathBuf};"},
{"lineNum":"    2","line":"use std::{env, io};"},
{"lineNum":"    3","line":"use std::ffi::OsStr;"},
{"lineNum":"    4","line":"use std::collections::HashSet;"},
{"lineNum":"    5","line":"use regex::{self, Regex};"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"use vfs::{File, FileType, MetaData, VFS};"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"mod test; //include unit tests"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#[derive(Debug)]"},
{"lineNum":"   12","line":"pub struct DirWalker<T: VFS> {"},
{"lineNum":"   13","line":"    // files to include/exclude"},
{"lineNum":"   14","line":"    directories: Vec<PathBuf>,"},
{"lineNum":"   15","line":"    blacklist_dirs: Vec<PathBuf>,"},
{"lineNum":"   16","line":"    blacklist_patterns: Vec<Regex>,"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"    // keep track of the files and folders we\'ve seen"},
{"lineNum":"   19","line":"    // `files` will only be files, `folders` will only be directories"},
{"lineNum":"   20","line":"    // symlinks will be resolved to their targets or discarded"},
{"lineNum":"   21","line":"    files: HashSet<PathBuf>,"},
{"lineNum":"   22","line":"    folders: HashSet<PathBuf>,"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"    // file system being traversed"},
{"lineNum":"   25","line":"    vfs: T,"},
{"lineNum":"   26","line":"}"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"impl<M, F, V> DirWalker<V>"},
{"lineNum":"   29","line":"where"},
{"lineNum":"   30","line":"    V: VFS<FileIter = F>,"},
{"lineNum":"   31","line":"    F: File<MD = M>,"},
{"lineNum":"   32","line":"    M: MetaData,"},
{"lineNum":"   33","line":"{"},
{"lineNum":"   34","line":"    /// Helper function to convert relative paths to absolute paths if necessary"},
{"lineNum":"   35","line":"    /// Can panic if any paths are relative and if the current directory is unknown"},
{"lineNum":"   36","line":"    fn get_abs_paths(dirs: &[&Path]) -> Vec<PathBuf> {","class":"lineCov","hits":"2","order":"5114","possible_hits":"2",},
{"lineNum":"   37","line":"        // if any paths are relative, append them to the current working dir"},
{"lineNum":"   38","line":"        // if getting the cwd fails, the whole process should abort"},
{"lineNum":"   39","line":"        let abs_paths: io::Result<Vec<PathBuf>> = dirs.into_iter()","class":"lineCov","hits":"1","order":"5115","possible_hits":"1",},
{"lineNum":"   40","line":"            .map(|dir| {","class":"linePartCov","hits":"3","order":"5120","possible_hits":"4",},
{"lineNum":"   41","line":"                if dir.is_absolute() {","class":"lineCov","hits":"2","order":"5123","possible_hits":"2",},
{"lineNum":"   42","line":"                    Ok(dir.to_path_buf())"},
{"lineNum":"   43","line":"                } else {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   44","line":"                    debug!(\"Converting `{:?}` to absolute path\", dir);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   45","line":"                    env::current_dir().map(|cwd| cwd.join(dir))","class":"lineCov","hits":"1","order":"5124","possible_hits":"1",},
{"lineNum":"   46","line":"                }"},
{"lineNum":"   47","line":"            })","class":"linePartCov","hits":"1","order":"5152","possible_hits":"4",},
{"lineNum":"   48","line":"            .collect();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   49","line":"        abs_paths.unwrap_or_else(|e| {"},
{"lineNum":"   50","line":"            panic!("},
{"lineNum":"   51","line":"                \"Couldn\'t retrieve current working directory; \\"},
{"lineNum":"   52","line":"                 try using absolute paths or fix your terminal.\\n\\"},
{"lineNum":"   53","line":"                 Error: {}\","},
{"lineNum":"   54","line":"                e","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   55","line":"            )","class":"linePartCov","hits":"1","order":"5156","possible_hits":"2",},
{"lineNum":"   56","line":"        })"},
{"lineNum":"   57","line":"    }"},
{"lineNum":"   58","line":"","class":"linePartCov","hits":"2","order":"5109","possible_hits":"8",},
{"lineNum":"   59","line":"    /// Create a new DirWalker from a list of directories","class":"lineCov","hits":"4","order":"5110","possible_hits":"4",},
{"lineNum":"   60","line":"    pub fn new<P: AsRef<Path>>(vfs: V, dirs: &[P]) -> DirWalker<V> {","class":"lineCov","hits":"2","order":"5113","possible_hits":"2",},
{"lineNum":"   61","line":"        let dirs: Vec<&Path> = dirs.iter().map(|p| p.as_ref()).collect();"},
{"lineNum":"   62","line":"        let abs_paths = Self::get_abs_paths(&dirs);","class":"lineCov","hits":"1","order":"5168","possible_hits":"1",},
{"lineNum":"   63","line":"","class":"lineCov","hits":"1","order":"5158","possible_hits":"1",},
{"lineNum":"   64","line":"        DirWalker {","class":"lineCov","hits":"1","order":"5160","possible_hits":"1",},
{"lineNum":"   65","line":"            directories: abs_paths,","class":"lineCov","hits":"1","order":"5161","possible_hits":"1",},
{"lineNum":"   66","line":"            blacklist_dirs: vec![],","class":"lineCov","hits":"1","order":"5162","possible_hits":"1",},
{"lineNum":"   67","line":"            blacklist_patterns: vec![],","class":"lineCov","hits":"1","order":"5166","possible_hits":"1",},
{"lineNum":"   68","line":"            files: HashSet::new(),","class":"lineCov","hits":"1","order":"5167","possible_hits":"1",},
{"lineNum":"   69","line":"            folders: HashSet::new(),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   70","line":"            vfs: vfs,","class":"linePartCov","hits":"2","order":"5169","possible_hits":"4",},
{"lineNum":"   71","line":"        }"},
{"lineNum":"   72","line":"    }"},
{"lineNum":"   73","line":"","class":"linePartCov","hits":"2","order":"6005","possible_hits":"8",},
{"lineNum":"   74","line":"    /// Build up a DirWalker with a list of blacklisted folders","class":"lineCov","hits":"4","order":"6006","possible_hits":"4",},
{"lineNum":"   75","line":"    pub fn blacklist_folders(mut self, bl: Vec<&OsStr>) -> Self {","class":"lineCov","hits":"1","order":"6009","possible_hits":"1",},
{"lineNum":"   76","line":"        let paths: Vec<_> = bl.into_iter().map(|s| Path::new(s)).collect();","class":"linePartCov","hits":"2","order":"6010","possible_hits":"3",},
{"lineNum":"   77","line":"        let abs_paths = Self::get_abs_paths(&paths);","class":"lineCov","hits":"1","order":"6011","possible_hits":"1",},
{"lineNum":"   78","line":"        self.blacklist_dirs = abs_paths;","class":"linePartCov","hits":"2","order":"6012","possible_hits":"5",},
{"lineNum":"   79","line":"        self"},
{"lineNum":"   80","line":"    }"},
{"lineNum":"   81","line":"","class":"linePartCov","hits":"2","order":"5240","possible_hits":"3",},
{"lineNum":"   82","line":"    /// Build up a DirWalker with a list of blacklisted path patterns"},
{"lineNum":"   83","line":"    pub fn blacklist_patterns(mut self, bl: Vec<&str>) -> Self {","class":"linePartCov","hits":"3","order":"5241","possible_hits":"5",},
{"lineNum":"   84","line":"        let regexes: Result<Vec<Regex>, regex::Error> =","class":"linePartCov","hits":"1","order":"5761","possible_hits":"3",},
{"lineNum":"   85","line":"            bl.into_iter().map(|s| Regex::new(s)).collect();","class":"lineCov","hits":"1","order":"5762","possible_hits":"1",},
{"lineNum":"   86","line":"        let regexes = regexes.unwrap_or_else(|e| panic!(\"Couldn\'t parse regex; \\nError: {}\", e));","class":"lineCov","hits":"1","order":"5763","possible_hits":"1",},
{"lineNum":"   87","line":"        self.blacklist_patterns = regexes;","class":"linePartCov","hits":"1","order":"5764","possible_hits":"2",},
{"lineNum":"   88","line":"        self"},
{"lineNum":"   89","line":"    }"},
{"lineNum":"   90","line":"","class":"lineCov","hits":"2","order":"5378","possible_hits":"2",},
{"lineNum":"   91","line":"    /// Determine whether a file is in scope (i.e. not seen already or blacklisted)"},
{"lineNum":"   92","line":"    fn should_handle_file(&self, path: &Path) -> bool {"},
{"lineNum":"   93","line":"        // only handle files that"},
{"lineNum":"   94","line":"        //  1) haven\'t been seen before and"},
{"lineNum":"   95","line":"        //  2) don\'t match a blacklist regex pattern","class":"lineCov","hits":"3","order":"5379","possible_hits":"3",},
{"lineNum":"   96","line":"        //      NOTE: if a path is invalid unicode it will never match a pattern"},
{"lineNum":"   97","line":"        !self.files.contains(path) && {","class":"linePartCov","hits":"3","order":"5380","possible_hits":"5",},
{"lineNum":"   98","line":"            if let Some(path_str) = path.to_str() {","class":"lineCov","hits":"3","order":"5381","possible_hits":"3",},
{"lineNum":"   99","line":"                self.blacklist_patterns","class":"lineCov","hits":"3","order":"5382","possible_hits":"3",},
{"lineNum":"  100","line":"                    .iter()"},
{"lineNum":"  101","line":"                    .all(|re| !re.is_match(path_str))"},
{"lineNum":"  102","line":"            } else {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  103","line":"                true"},
{"lineNum":"  104","line":"            }"},
{"lineNum":"  105","line":"        }","class":"lineCov","hits":"1","order":"5383","possible_hits":"1",},
{"lineNum":"  106","line":"    }"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"    /// Determine whether a folder is in scope(i.e. not seen already or blacklisted)","class":"lineCov","hits":"2","order":"5318","possible_hits":"2",},
{"lineNum":"  109","line":"    fn should_traverse_folder(&self, path: &Path) -> bool {"},
{"lineNum":"  110","line":"        // only look into folders that"},
{"lineNum":"  111","line":"        //  1) haven\'t been seen before,"},
{"lineNum":"  112","line":"        //  2) don\'t match a folder blacklist, and"},
{"lineNum":"  113","line":"        //  3) don\'t match a regex pattern blacklist"},
{"lineNum":"  114","line":"        //      NOTE: again, bad unicode paths will not match any regex","class":"lineCov","hits":"5","order":"5319","possible_hits":"5",},
{"lineNum":"  115","line":"        !self.folders.contains(path) && self.blacklist_dirs.iter().all(|dir| !path.starts_with(dir))","class":"lineCov","hits":"4","order":"5328","possible_hits":"4",},
{"lineNum":"  116","line":"            && {"},
{"lineNum":"  117","line":"                if let Some(path_str) = path.to_str() {","class":"linePartCov","hits":"3","order":"5330","possible_hits":"5",},
{"lineNum":"  118","line":"                    self.blacklist_patterns","class":"lineCov","hits":"3","order":"5331","possible_hits":"3",},
{"lineNum":"  119","line":"                        .iter()","class":"lineCov","hits":"3","order":"5332","possible_hits":"3",},
{"lineNum":"  120","line":"                        .all(|re| !re.is_match(path_str))"},
{"lineNum":"  121","line":"                } else {"},
{"lineNum":"  122","line":"                    true","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"                }"},
{"lineNum":"  124","line":"            }"},
{"lineNum":"  125","line":"    }","class":"lineCov","hits":"1","order":"5333","possible_hits":"1",},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    /// Perform operation on a file: in this case just add it to a hashset"},
{"lineNum":"  128","line":"    fn handle_file(&mut self, path: &Path) {","class":"linePartCov","hits":"2","order":"5385","possible_hits":"3",},
{"lineNum":"  129","line":"        // do your thing: here just add to a field of filepaths"},
{"lineNum":"  130","line":"        debug!(\"\\tHANDLING FILE {:?}\", path);","class":"lineCov","hits":"3","order":"5386","possible_hits":"3",},
{"lineNum":"  131","line":"        let was_absent = self.files.insert(path.to_owned());","class":"lineCov","hits":"2","order":"5387","possible_hits":"2",},
{"lineNum":"  132","line":"        assert!(was_absent);","class":"lineCov","hits":"1","order":"5388","possible_hits":"1",},
{"lineNum":"  133","line":"    }","class":"lineCov","hits":"1","order":"5389","possible_hits":"1",},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"    /// Operate on a folder: iterate through its contents recursively"},
{"lineNum":"  136","line":"    pub fn traverse_folder(&mut self, path: &Path) {","class":"linePartCov","hits":"2","order":"5335","possible_hits":"5",},
{"lineNum":"  137","line":"        // assume should_handle_folder was called"},
{"lineNum":"  138","line":"        // mutually recursive with Self::dispatch_any_file (sorry mom)"},
{"lineNum":"  139","line":"        // a complex directory structure will be mirrored with a complex stack"},
{"lineNum":"  140","line":"        //  note this is only sorta how BS does it. his isn\'t the call stack"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"        let was_absent = self.folders.insert(path.to_owned());","class":"lineCov","hits":"2","order":"5336","possible_hits":"2",},
{"lineNum":"  143","line":"        assert!(was_absent);","class":"lineCov","hits":"1","order":"5342","possible_hits":"1",},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"        let contents = match self.vfs.list_dir(path) {","class":"lineCov","hits":"1","order":"5343","possible_hits":"1",},
{"lineNum":"  146","line":"            Ok(c) => c,","class":"lineCov","hits":"1","order":"5362","possible_hits":"1",},
{"lineNum":"  147","line":"            Err(e) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  148","line":"                warn!(\"Failed to list contents of dir {:?}: {}\", path, e);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  149","line":"                return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  150","line":"            }"},
{"lineNum":"  151","line":"        };","class":"linePartCov","hits":"1","order":"5363","possible_hits":"7",},
{"lineNum":"  152","line":"        for entry in contents {","class":"linePartCov","hits":"4","order":"5364","possible_hits":"6",},
{"lineNum":"  153","line":"            match entry {","class":"linePartCov","hits":"1","order":"5391","possible_hits":"10",},
{"lineNum":"  154","line":"                Ok(ref e) => self.dispatch_any_file(&e.get_path(), e.get_type().ok()),","class":"linePartCov","hits":"4","order":"5369","possible_hits":"5",},
{"lineNum":"  155","line":"                Err(e) => warn!(\"Failed to identify file in dir {:?}: {}\", path, e),","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  156","line":"            }","class":"linePartCov","hits":"1","order":"5392","possible_hits":"4",},
{"lineNum":"  157","line":"        }","class":"linePartCov","hits":"3","order":"5368","possible_hits":"9",},
{"lineNum":"  158","line":"    }","class":"linePartCov","hits":"2","order":"5418","possible_hits":"4",},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"    /// Check and possibly handle any filesystem object"},
{"lineNum":"  161","line":"    fn dispatch_any_file(&mut self, path: &Path, filetype: Option<FileType>) {","class":"linePartCov","hits":"2","order":"5195","possible_hits":"3",},
{"lineNum":"  162","line":"        // handle a file, traverse a directory, or follow a symlink"},
{"lineNum":"  163","line":"        let filetype = match filetype {","class":"lineCov","hits":"1","order":"5315","possible_hits":"1",},
{"lineNum":"  164","line":"            Some(ft) => ft,","class":"lineCov","hits":"2","order":"5196","possible_hits":"2",},
{"lineNum":"  165","line":"            None => match self.vfs.get_metadata(path) {"},
{"lineNum":"  166","line":"                Ok(md) => md.get_type(),","class":"lineCov","hits":"1","order":"5197","possible_hits":"1",},
{"lineNum":"  167","line":"                Err(e) => {","class":"linePartCov","hits":"2","order":"5221","possible_hits":"3",},
{"lineNum":"  168","line":"                    warn!(\"Couldn\'t get metadata for {:?}: {}\", path, e);","class":"lineCov","hits":"1","order":"5222","possible_hits":"1",},
{"lineNum":"  169","line":"                    return;","class":"linePartCov","hits":"2","order":"5223","possible_hits":"3",},
{"lineNum":"  170","line":"                }","class":"lineCov","hits":"1","order":"5230","possible_hits":"1",},
{"lineNum":"  171","line":"            },"},
{"lineNum":"  172","line":"        };","class":"linePartCov","hits":"2","order":"5224","possible_hits":"4",},
{"lineNum":"  173","line":"        match filetype {","class":"linePartCov","hits":"1","order":"5229","possible_hits":"5",},
{"lineNum":"  174","line":"            FileType::File => if self.should_handle_file(path) {"},
{"lineNum":"  175","line":"                self.handle_file(path)","class":"linePartCov","hits":"3","order":"5390","possible_hits":"4",},
{"lineNum":"  176","line":"            },","class":"lineCov","hits":"1","order":"5316","possible_hits":"1",},
{"lineNum":"  177","line":"            FileType::Dir => if self.should_traverse_folder(path) {","class":"lineCov","hits":"3","order":"5377","possible_hits":"3",},
{"lineNum":"  178","line":"                self.traverse_folder(path)","class":"lineCov","hits":"1","order":"5384","possible_hits":"1",},
{"lineNum":"  179","line":"            },"},
{"lineNum":"  180","line":"            FileType::Symlink => match self.vfs.read_link(path) {"},
{"lineNum":"  181","line":"                Ok(ref f) => self.dispatch_any_file(f, None),"},
{"lineNum":"  182","line":"                Err(e) => warn!(\"Couldn\'t resolve symlink {:?}: {}\", path, e),","class":"lineCov","hits":"3","order":"5317","possible_hits":"3",},
{"lineNum":"  183","line":"            },","class":"lineCov","hits":"1","order":"5334","possible_hits":"1",},
{"lineNum":"  184","line":"            FileType::Other => debug!(\"Ignoring unknown file {:?}\", path),"},
{"lineNum":"  185","line":"        }"},
{"lineNum":"  186","line":"    }"},
{"lineNum":"  187","line":"","class":"linePartCov","hits":"1","order":"5393","possible_hits":"9",},
{"lineNum":"  188","line":"    /// Collect all specified files into a set; this consumes the DirWalker","class":"lineCov","hits":"2","order":"5398","possible_hits":"2",},
{"lineNum":"  189","line":"    pub fn traverse_all(mut self) -> HashSet<PathBuf> {","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  190","line":"        // steal directories (performance hack, ask owen)","class":"linePartCov","hits":"1","order":"5399","possible_hits":"4",},
{"lineNum":"  191","line":"        let directories = ::std::mem::replace(&mut self.directories, vec![]);","class":"linePartCov","hits":"1","order":"5400","possible_hits":"4",},
{"lineNum":"  192","line":"        for path in directories {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  193","line":"            self.dispatch_any_file(&path, None);"},
{"lineNum":"  194","line":"        }","class":"lineCov","hits":"2","order":"5231","possible_hits":"2",},
{"lineNum":"  195","line":"        self.files"},
{"lineNum":"  196","line":"    }"},
{"lineNum":"  197","line":"}","class":"linePartCov","hits":"2","order":"5170","possible_hits":"3",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "smllr-cd1387de2be9f35d", "date" : "2017-11-27 19:54:30", "instrumented" : 95, "covered" : 82,};
var merged_data = [];
