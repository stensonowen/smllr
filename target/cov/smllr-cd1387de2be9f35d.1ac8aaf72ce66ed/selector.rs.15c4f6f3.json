var data = {lines:[
{"lineNum":"    1","line":"//! Determine which of the duplicate files shouldn\'t be touched"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"use std::cmp::Ordering;"},
{"lineNum":"    4","line":"use std::path::Path;"},
{"lineNum":"    5","line":"use std::marker::PhantomData;"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"use vfs::{File, MetaData, VFS};"},
{"lineNum":"    8","line":"use catalog::proxy::Duplicates;"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"/// Interface for choosing between files"},
{"lineNum":"   11","line":"pub trait Selector<V: VFS> {"},
{"lineNum":"   12","line":"    /// Indicate that you want the max instead of the min or vice versa"},
{"lineNum":"   13","line":"    fn reverse(&mut self);"},
{"lineNum":"   14","line":"    /// Choose which of the Paths in Duplicates is the \"true\" (unchanged) one"},
{"lineNum":"   15","line":"    fn select<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path;"},
{"lineNum":"   16","line":"    /// Helper to be called by `select`: identify the minimum"},
{"lineNum":"   17","line":"    fn min<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path;"},
{"lineNum":"   18","line":"    /// Helper to be called by `select`: identify the maximum"},
{"lineNum":"   19","line":"    fn max<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path;"},
{"lineNum":"   20","line":"}"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"/// Choose between files based on their path"},
{"lineNum":"   23","line":"pub struct PathSelect<V: VFS> {"},
{"lineNum":"   24","line":"    reverse: bool,"},
{"lineNum":"   25","line":"    vfs: PhantomData<V>, // must be generic over VFS but don\'t need as field"},
{"lineNum":"   26","line":"}"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"/// Chose between files based on which was most recently modified"},
{"lineNum":"   29","line":"pub struct DateSelect<V: VFS> {"},
{"lineNum":"   30","line":"    reverse: bool,"},
{"lineNum":"   31","line":"    vfs: V,"},
{"lineNum":"   32","line":"}"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"// constructor for PathSelect"},
{"lineNum":"   35","line":"impl<V: VFS> PathSelect<V> {"},
{"lineNum":"   36","line":"    /// Construct an empty `PathSelect`"},
{"lineNum":"   37","line":"    pub fn new(_: V) -> Self {","class":"lineCov","hits":"1","order":"3220","possible_hits":"1",},
{"lineNum":"   38","line":"        PathSelect {","class":"lineCov","hits":"1","order":"3221","possible_hits":"1",},
{"lineNum":"   39","line":"            reverse: false,"},
{"lineNum":"   40","line":"            vfs: PhantomData,"},
{"lineNum":"   41","line":"        }"},
{"lineNum":"   42","line":"    }","class":"linePartCov","hits":"1","order":"3222","possible_hits":"2",},
{"lineNum":"   43","line":"}"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"// constructor for DateSelect"},
{"lineNum":"   46","line":"impl<V: VFS> DateSelect<V> {"},
{"lineNum":"   47","line":"    /// Construct an empty `DateSelect`"},
{"lineNum":"   48","line":"    pub fn new(v: V) -> Self {","class":"lineCov","hits":"2","order":"4452","possible_hits":"2",},
{"lineNum":"   49","line":"        DateSelect {","class":"lineCov","hits":"1","order":"4454","possible_hits":"1",},
{"lineNum":"   50","line":"            reverse: false,"},
{"lineNum":"   51","line":"            vfs: v,","class":"lineCov","hits":"1","order":"4453","possible_hits":"1",},
{"lineNum":"   52","line":"        }"},
{"lineNum":"   53","line":"    }","class":"linePartCov","hits":"1","order":"4455","possible_hits":"2",},
{"lineNum":"   54","line":"}"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"// implement Selector for heap/trait objects"},
{"lineNum":"   57","line":"impl<V: VFS> Selector<V> for Box<Selector<V>> {"},
{"lineNum":"   58","line":"    fn reverse(&mut self) {"},
{"lineNum":"   59","line":"        (**self).reverse();"},
{"lineNum":"   60","line":"    }"},
{"lineNum":"   61","line":"    fn select<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path {"},
{"lineNum":"   62","line":"        (**self).select(dups)"},
{"lineNum":"   63","line":"    }"},
{"lineNum":"   64","line":"    fn min<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path {"},
{"lineNum":"   65","line":"        (**self).min(dups)"},
{"lineNum":"   66","line":"    }"},
{"lineNum":"   67","line":"    fn max<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path {"},
{"lineNum":"   68","line":"        (**self).max(dups)"},
{"lineNum":"   69","line":"    }"},
{"lineNum":"   70","line":"}"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"// implement Selector based on filepaths"},
{"lineNum":"   73","line":"impl<V: VFS> Selector<V> for PathSelect<V> {"},
{"lineNum":"   74","line":"    fn reverse(&mut self) {","class":"lineCov","hits":"2","order":"4103","possible_hits":"2",},
{"lineNum":"   75","line":"        self.reverse = true;","class":"lineCov","hits":"1","order":"4104","possible_hits":"1",},
{"lineNum":"   76","line":"    }","class":"linePartCov","hits":"1","order":"4105","possible_hits":"2",},
{"lineNum":"   77","line":"    fn select<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path {","class":"lineCov","hits":"2","order":"3240","possible_hits":"2",},
{"lineNum":"   78","line":"        // select the shallowest element (the path is the shortest)"},
{"lineNum":"   79","line":"        if self.reverse {","class":"lineCov","hits":"2","order":"3241","possible_hits":"2",},
{"lineNum":"   80","line":"            self.max(dups)","class":"lineCov","hits":"2","order":"4107","possible_hits":"2",},
{"lineNum":"   81","line":"        } else {"},
{"lineNum":"   82","line":"            self.min(dups)","class":"lineCov","hits":"2","order":"3242","possible_hits":"2",},
{"lineNum":"   83","line":"        }"},
{"lineNum":"   84","line":"    }","class":"linePartCov","hits":"1","order":"3280","possible_hits":"2",},
{"lineNum":"   85","line":"    // select the file closest to the root"},
{"lineNum":"   86","line":"    fn min<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path {","class":"lineCov","hits":"2","order":"3243","possible_hits":"2",},
{"lineNum":"   87","line":"        dups.0","class":"lineCov","hits":"1","order":"3244","possible_hits":"1",},
{"lineNum":"   88","line":"            .iter()"},
{"lineNum":"   89","line":"            .min_by(|&a_path, &b_path| {","class":"lineCov","hits":"2","order":"3256","possible_hits":"2",},
{"lineNum":"   90","line":"                let a_score = a_path.components().count();","class":"lineCov","hits":"1","order":"3257","possible_hits":"1",},
{"lineNum":"   91","line":"                let b_score = b_path.components().count();","class":"lineCov","hits":"1","order":"3268","possible_hits":"1",},
{"lineNum":"   92","line":"                a_score.cmp(&b_score)","class":"lineCov","hits":"1","order":"3269","possible_hits":"1",},
{"lineNum":"   93","line":"            })","class":"linePartCov","hits":"1","order":"3272","possible_hits":"2",},
{"lineNum":"   94","line":"            .unwrap() // is only None if `dups` is empty"},
{"lineNum":"   95","line":"    }","class":"linePartCov","hits":"1","order":"3279","possible_hits":"2",},
{"lineNum":"   96","line":"    // select the file farthest from the root"},
{"lineNum":"   97","line":"    fn max<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path {","class":"lineCov","hits":"2","order":"4108","possible_hits":"2",},
{"lineNum":"   98","line":"        dups.0","class":"lineCov","hits":"1","order":"4109","possible_hits":"1",},
{"lineNum":"   99","line":"            .iter()"},
{"lineNum":"  100","line":"            .max_by(|&a_path, &b_path| {","class":"lineCov","hits":"2","order":"4115","possible_hits":"2",},
{"lineNum":"  101","line":"                let a_score = a_path.components().count();","class":"lineCov","hits":"1","order":"4118","possible_hits":"1",},
{"lineNum":"  102","line":"                let b_score = b_path.components().count();","class":"lineCov","hits":"1","order":"4119","possible_hits":"1",},
{"lineNum":"  103","line":"                a_score.cmp(&b_score)","class":"lineCov","hits":"1","order":"4121","possible_hits":"1",},
{"lineNum":"  104","line":"            })","class":"linePartCov","hits":"1","order":"4123","possible_hits":"2",},
{"lineNum":"  105","line":"            .unwrap()"},
{"lineNum":"  106","line":"    }","class":"linePartCov","hits":"1","order":"4136","possible_hits":"2",},
{"lineNum":"  107","line":"}"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"// helper function for comparing two Files based on their date"},
{"lineNum":"  110","line":"fn date_cmp<\'a, T: File>(a: &\'a T, b: &\'a T) -> Ordering {","class":"linePartCov","hits":"2","order":"4488","possible_hits":"3",},
{"lineNum":"  111","line":"    let md_a = a.get_metadata().expect(\"Failed to get metadata\");","class":"linePartCov","hits":"1","order":"4489","possible_hits":"2",},
{"lineNum":"  112","line":"    let md_b = b.get_metadata().expect(\"Failed to get metadata\");","class":"linePartCov","hits":"2","order":"4490","possible_hits":"4",},
{"lineNum":"  113","line":"    let date_a = md_a.get_mod_time()","class":"linePartCov","hits":"2","order":"4491","possible_hits":"3",},
{"lineNum":"  114","line":"        .expect(\"Failed to get modification time\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  115","line":"    let date_b = md_b.get_mod_time()","class":"lineCov","hits":"2","order":"4495","possible_hits":"2",},
{"lineNum":"  116","line":"        .expect(\"Failed to get modification time\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  117","line":"    date_a.cmp(&date_b)","class":"linePartCov","hits":"2","order":"4496","possible_hits":"3",},
{"lineNum":"  118","line":"}","class":"linePartCov","hits":"2","order":"4503","possible_hits":"4",},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"// implement Selector based on modification date"},
{"lineNum":"  121","line":"impl<V: VFS> Selector<V> for DateSelect<V> {"},
{"lineNum":"  122","line":"    fn reverse(&mut self) {","class":"lineCov","hits":"2","order":"4457","possible_hits":"2",},
{"lineNum":"  123","line":"        self.reverse = true;","class":"lineCov","hits":"1","order":"4460","possible_hits":"1",},
{"lineNum":"  124","line":"    }","class":"linePartCov","hits":"1","order":"4461","possible_hits":"2",},
{"lineNum":"  125","line":"    // select the file modified most recently"},
{"lineNum":"  126","line":"    fn min<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path {","class":"linePartCov","hits":"2","order":"4466","possible_hits":"3",},
{"lineNum":"  127","line":"        dups.0","class":"lineCov","hits":"3","order":"4467","possible_hits":"3",},
{"lineNum":"  128","line":"            .iter()"},
{"lineNum":"  129","line":"            .map(|path| (path, self.vfs.get_file(path).expect(\"Failed to get file\")))","class":"lineCov","hits":"3","order":"4469","possible_hits":"3",},
{"lineNum":"  130","line":"            .min_by(|&(_, ref a), &(_, ref b)| date_cmp(a, b))","class":"lineCov","hits":"2","order":"4487","possible_hits":"2",},
{"lineNum":"  131","line":"            .unwrap() // safe to assume >0 files"},
{"lineNum":"  132","line":"            .0"},
{"lineNum":"  133","line":"    }","class":"linePartCov","hits":"1","order":"4505","possible_hits":"2",},
{"lineNum":"  134","line":"    // select the file modified first"},
{"lineNum":"  135","line":"    fn max<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path {","class":"linePartCov","hits":"2","order":"4484","possible_hits":"3",},
{"lineNum":"  136","line":"        dups.0","class":"lineCov","hits":"3","order":"4485","possible_hits":"3",},
{"lineNum":"  137","line":"            .iter()"},
{"lineNum":"  138","line":"            .map(|path| (path, self.vfs.get_file(path).expect(\"Failed to get file\")))","class":"lineCov","hits":"3","order":"4486","possible_hits":"3",},
{"lineNum":"  139","line":"            .max_by(|&(_, ref a), &(_, ref b)| date_cmp(a, b))","class":"lineCov","hits":"2","order":"4504","possible_hits":"2",},
{"lineNum":"  140","line":"            .unwrap() // safe to assume >0 files"},
{"lineNum":"  141","line":"            .0"},
{"lineNum":"  142","line":"    }","class":"linePartCov","hits":"1","order":"4509","possible_hits":"2",},
{"lineNum":"  143","line":"    fn select<\'b>(&self, dups: &\'b Duplicates) -> &\'b Path {","class":"lineCov","hits":"2","order":"4463","possible_hits":"2",},
{"lineNum":"  144","line":"        // select the newest element (the SystemTime is the largest)"},
{"lineNum":"  145","line":"        if self.reverse {","class":"lineCov","hits":"2","order":"4464","possible_hits":"2",},
{"lineNum":"  146","line":"            self.min(dups)","class":"lineCov","hits":"2","order":"4465","possible_hits":"2",},
{"lineNum":"  147","line":"        } else {"},
{"lineNum":"  148","line":"            self.max(dups)","class":"lineCov","hits":"2","order":"4483","possible_hits":"2",},
{"lineNum":"  149","line":"        }"},
{"lineNum":"  150","line":"    }","class":"linePartCov","hits":"1","order":"4506","possible_hits":"2",},
{"lineNum":"  151","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "smllr-cd1387de2be9f35d", "date" : "2017-12-06 19:01:08", "instrumented" : 58, "covered" : 56,};
var merged_data = [];
