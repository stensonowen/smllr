var data = {lines:[
{"lineNum":"    1","line":"//! Identify duplicates in a collection of files"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"use std::path::Path;"},
{"lineNum":"    4","line":"use std::collections::HashMap;"},
{"lineNum":"    5","line":"use std::collections::hash_map::Entry;"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"pub use helpers::ID;"},
{"lineNum":"    8","line":"use vfs::{File, MetaData, VFS};"},
{"lineNum":"    9","line":"use hash::FileHash;"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"pub mod proxy;"},
{"lineNum":"   12","line":"use self::proxy::{Duplicates, FirstKBytesProxy};"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"mod print; // include debug printing info"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"mod test; // include unit tests"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"/// Catalog files, determining lazily if files are identical"},
{"lineNum":"   20","line":"///  by checking filesize, the first K bytes, and then the whole file hash"},
{"lineNum":"   21","line":"///  but only when necessary to check"},
{"lineNum":"   22","line":"pub struct FileCataloger<T: VFS, H: FileHash> {"},
{"lineNum":"   23","line":"    catalog: HashMap<u64, FirstKBytesProxy<H>>,"},
{"lineNum":"   24","line":"    vfs: T,"},
{"lineNum":"   25","line":"    // In the future, it would also be helpful to include a shortcut to know"},
{"lineNum":"   26","line":"    // which FirstKBytesProxies contain duplicates to avoid a full search when"},
{"lineNum":"   27","line":"    // get_repeats() is called."},
{"lineNum":"   28","line":"}"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"impl<T: VFS, H: FileHash> FileCataloger<T, H> {"},
{"lineNum":"   31","line":"    /// Initilize the filecataloger"},
{"lineNum":"   32","line":"    pub fn new(vfs: T) -> Self {","class":"linePartCov","hits":"4","order":"4656","possible_hits":"6",},
{"lineNum":"   33","line":"        FileCataloger {","class":"lineCov","hits":"2","order":"4670","possible_hits":"2",},
{"lineNum":"   34","line":"            catalog: HashMap::new(),","class":"lineCov","hits":"2","order":"4659","possible_hits":"2",},
{"lineNum":"   35","line":"            vfs: vfs,","class":"lineCov","hits":"2","order":"4669","possible_hits":"2",},
{"lineNum":"   36","line":"        }"},
{"lineNum":"   37","line":"    }","class":"linePartCov","hits":"2","order":"4671","possible_hits":"4",},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    // each Vec<Duplicates> is a vector of all the Duplicates w/ the same content"},
{"lineNum":"   40","line":"    // Each Duplicate is a vector of links that point to one inode"},
{"lineNum":"   41","line":"    /// Check all included Proxies for duplicates"},
{"lineNum":"   42","line":"    pub fn get_repeats(&self) -> Vec<Duplicates> {","class":"linePartCov","hits":"4","order":"4909","possible_hits":"6",},
{"lineNum":"   43","line":"        let mut all = vec![];","class":"lineCov","hits":"2","order":"4910","possible_hits":"2",},
{"lineNum":"   44","line":"        // for each subgrouping (done by size), get all the list of duplicates and"},
{"lineNum":"   45","line":"        // add them to are return variable."},
{"lineNum":"   46","line":"        for fkbp in self.catalog.values() {","class":"linePartCov","hits":"6","order":"4912","possible_hits":"12",},
{"lineNum":"   47","line":"            //for (_size, ref fkbp) in &self.catalog {"},
{"lineNum":"   48","line":"            all.append(&mut fkbp.get_repeats());","class":"linePartCov","hits":"4","order":"4919","possible_hits":"6",},
{"lineNum":"   49","line":"        }"},
{"lineNum":"   50","line":"        all","class":"lineCov","hits":"2","order":"4951","possible_hits":"2",},
{"lineNum":"   51","line":"    }","class":"linePartCov","hits":"2","order":"4952","possible_hits":"4",},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"    /// Inserts path into the catalog"},
{"lineNum":"   54","line":"    pub fn insert(&mut self, path: &Path) {","class":"linePartCov","hits":"4","order":"4691","possible_hits":"6",},
{"lineNum":"   55","line":"        // get the metadata (needed for preliminary comparision and storage)"},
{"lineNum":"   56","line":"        let file = self.vfs.get_file(path).expect(\"No such file\");","class":"linePartCov","hits":"2","order":"4692","possible_hits":"4",},
{"lineNum":"   57","line":"        let md = file.get_metadata().expect(\"IO Error getting Metadata\");","class":"linePartCov","hits":"4","order":"4693","possible_hits":"8",},
{"lineNum":"   58","line":"        let size: u64 = md.get_len();","class":"linePartCov","hits":"4","order":"4694","possible_hits":"6",},
{"lineNum":"   59","line":"        let id = ID {","class":"lineCov","hits":"2","order":"4697","possible_hits":"2",},
{"lineNum":"   60","line":"            dev: md.get_device().expect(\"Failed to read device info\").0,","class":"linePartCov","hits":"4","order":"4695","possible_hits":"6",},
{"lineNum":"   61","line":"            inode: md.get_inode().0,","class":"linePartCov","hits":"4","order":"4696","possible_hits":"6",},
{"lineNum":"   62","line":"        };"},
{"lineNum":"   63","line":"        // sort by size into the appropriate proxy"},
{"lineNum":"   64","line":"        match self.catalog.entry(size) {","class":"linePartCov","hits":"2","order":"4698","possible_hits":"8",},
{"lineNum":"   65","line":"            // If another file of that size has been included, insert into that proxy"},
{"lineNum":"   66","line":"            Entry::Occupied(mut occ_entry) => occ_entry.get_mut().insert(&self.vfs, id, path),","class":"linePartCov","hits":"4","order":"4705","possible_hits":"6",},
{"lineNum":"   67","line":"            // otherwise create a new firstkbytesproxy with path as the delayed insert."},
{"lineNum":"   68","line":"            Entry::Vacant(vac_entry) => {","class":"lineCov","hits":"2","order":"4706","possible_hits":"2",},
{"lineNum":"   69","line":"                vac_entry.insert(FirstKBytesProxy::new(id, path));","class":"lineCov","hits":"4","order":"4707","possible_hits":"4",},
{"lineNum":"   70","line":"            }"},
{"lineNum":"   71","line":"        }"},
{"lineNum":"   72","line":"    }","class":"linePartCov","hits":"4","order":"4716","possible_hits":"8",},
{"lineNum":"   73","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "smllr-cd1387de2be9f35d", "date" : "2017-12-06 19:01:08", "instrumented" : 23, "covered" : 23,};
var merged_data = [];
