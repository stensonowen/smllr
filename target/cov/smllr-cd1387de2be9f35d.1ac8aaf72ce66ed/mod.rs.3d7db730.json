var data = {lines:[
{"lineNum":"    1","line":"//! Handle duplicates"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"use vfs::{File, MetaData, VFS};"},
{"lineNum":"    4","line":"use catalog::proxy::Duplicates;"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"pub mod selector;"},
{"lineNum":"    7","line":"use self::selector::Selector;"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"mod test; // include unit tests"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"/// Trait for acting on duplicate files"},
{"lineNum":"   12","line":"pub trait FileActor<V: VFS, S: Selector<V>> {"},
{"lineNum":"   13","line":"    /// Use Selector `S` to identify the \'true\' file and then perform its action, returning the"},
{"lineNum":"   14","line":"    /// amount of duplicate space"},
{"lineNum":"   15","line":"    fn act(&mut self, dups: Duplicates) -> u64;"},
{"lineNum":"   16","line":"}"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"// call FileActor methods on objects on the heap that support it"},
{"lineNum":"   19","line":"impl<V: VFS, S: Selector<V>> FileActor<V, S> for Box<FileActor<V, S>> {"},
{"lineNum":"   20","line":"    fn act(&mut self, dups: Duplicates) -> u64 {"},
{"lineNum":"   21","line":"        (**self).act(dups)"},
{"lineNum":"   22","line":"    }"},
{"lineNum":"   23","line":"}"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/// Actor that prints file names but doesn\'t modify the filesystem"},
{"lineNum":"   26","line":"pub struct FilePrinter<V: VFS, S: Selector<V>> {"},
{"lineNum":"   27","line":"    selector: S,"},
{"lineNum":"   28","line":"    vfs: V,"},
{"lineNum":"   29","line":"}"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"/// Actor that deletes all but the selected file"},
{"lineNum":"   32","line":"pub struct FileDeleter<V: VFS, S: Selector<V>> {"},
{"lineNum":"   33","line":"    selector: S,"},
{"lineNum":"   34","line":"    vfs: V,"},
{"lineNum":"   35","line":"}"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"/// Actor that replaces all but the selected file with links to it"},
{"lineNum":"   38","line":"pub struct FileLinker<V: VFS, S: Selector<V>> {"},
{"lineNum":"   39","line":"    selector: S,"},
{"lineNum":"   40","line":"    vfs: V,"},
{"lineNum":"   41","line":"}"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"// constructors for FilePrinter: dependency inject a Selector"},
{"lineNum":"   44","line":"impl<V: VFS, S: Selector<V>> FilePrinter<V, S> {"},
{"lineNum":"   45","line":"    /// Create a new `FilePrinter`"},
{"lineNum":"   46","line":"    pub fn new(v: V, s: S) -> Self {","class":"lineCov","hits":"2","order":"3232","possible_hits":"2",},
{"lineNum":"   47","line":"        FilePrinter {","class":"lineCov","hits":"1","order":"3235","possible_hits":"1",},
{"lineNum":"   48","line":"            selector: s,","class":"lineCov","hits":"1","order":"3233","possible_hits":"1",},
{"lineNum":"   49","line":"            vfs: v,","class":"lineCov","hits":"1","order":"3234","possible_hits":"1",},
{"lineNum":"   50","line":"        }"},
{"lineNum":"   51","line":"    }","class":"linePartCov","hits":"1","order":"3236","possible_hits":"2",},
{"lineNum":"   52","line":"}"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"// constructors for FileDeleter: dependency inject a Selector"},
{"lineNum":"   55","line":"impl<V: VFS, S: Selector<V>> FileDeleter<V, S> {"},
{"lineNum":"   56","line":"    /// Create a new `FileDeleter`"},
{"lineNum":"   57","line":"    pub fn new(v: V, s: S) -> Self {","class":"lineCov","hits":"2","order":"4379","possible_hits":"2",},
{"lineNum":"   58","line":"        FileDeleter {","class":"lineCov","hits":"1","order":"4384","possible_hits":"1",},
{"lineNum":"   59","line":"            selector: s,","class":"lineCov","hits":"1","order":"4381","possible_hits":"1",},
{"lineNum":"   60","line":"            vfs: v,","class":"lineCov","hits":"1","order":"4383","possible_hits":"1",},
{"lineNum":"   61","line":"        }"},
{"lineNum":"   62","line":"    }","class":"linePartCov","hits":"1","order":"4386","possible_hits":"2",},
{"lineNum":"   63","line":"}"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"// constructors for FileLinker: dependency inject a Selector"},
{"lineNum":"   66","line":"impl<V: VFS, S: Selector<V>> FileLinker<V, S> {"},
{"lineNum":"   67","line":"    /// Create a new `FileLinker`"},
{"lineNum":"   68","line":"    pub fn new(v: V, s: S) -> Self {","class":"lineCov","hits":"2","order":"4161","possible_hits":"2",},
{"lineNum":"   69","line":"        FileLinker {","class":"lineCov","hits":"1","order":"4164","possible_hits":"1",},
{"lineNum":"   70","line":"            selector: s,","class":"lineCov","hits":"1","order":"4162","possible_hits":"1",},
{"lineNum":"   71","line":"            vfs: v,","class":"lineCov","hits":"1","order":"4163","possible_hits":"1",},
{"lineNum":"   72","line":"        }"},
{"lineNum":"   73","line":"    }","class":"linePartCov","hits":"1","order":"4165","possible_hits":"2",},
{"lineNum":"   74","line":"}"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"// implement `act()` for a FilePrinter"},
{"lineNum":"   77","line":"impl<V: VFS, S: Selector<V>> FileActor<V, S> for FilePrinter<V, S> {"},
{"lineNum":"   78","line":"    /// Simply print which file in the set is considered the \'true\' file and which are"},
{"lineNum":"   79","line":"    /// \'duplicates\' of it as well as how much space would be saved by"},
{"lineNum":"   80","line":"    /// deleting them"},
{"lineNum":"   81","line":"    fn act(&mut self, dups: Duplicates) -> u64 {","class":"linePartCov","hits":"2","order":"3238","possible_hits":"36",},
{"lineNum":"   82","line":"        // identify true file with selector S"},
{"lineNum":"   83","line":"        let real = self.selector.select(&dups);","class":"lineCov","hits":"1","order":"3239","possible_hits":"1",},
{"lineNum":"   84","line":"        // get the size; need to know how much space we\'re freeing"},
{"lineNum":"   85","line":"        let size = self.vfs","class":"lineCov","hits":"5","order":"3281","possible_hits":"5",},
{"lineNum":"   86","line":"            .get_file(real)","class":"lineCov","hits":"1","order":"3282","possible_hits":"1",},
{"lineNum":"   87","line":"            .expect(\"Failed to get file from path\")"},
{"lineNum":"   88","line":"            .get_metadata()"},
{"lineNum":"   89","line":"            .expect(\"Failed to get file metadata\")"},
{"lineNum":"   90","line":"            .get_len();","class":"linePartCov","hits":"1","order":"3363","possible_hits":"2",},
{"lineNum":"   91","line":"        let mut save_size = 0;","class":"lineCov","hits":"1","order":"3384","possible_hits":"1",},
{"lineNum":"   92","line":"        // log the selection"},
{"lineNum":"   93","line":"        info!(\"{:?} is the true file\", real);","class":"linePartCov","hits":"4","order":"3385","possible_hits":"8",},
{"lineNum":"   94","line":"        // print the file that is considered \'true\'"},
{"lineNum":"   95","line":"        println!(\"{:?} is the true file\", real);","class":"lineCov","hits":"2","order":"3396","possible_hits":"2",},
{"lineNum":"   96","line":"        // iterate over all other duplicates"},
{"lineNum":"   97","line":"        for f in dups.0.iter().filter(|&f| f.as_path() != real) {","class":"lineCov","hits":"10","order":"3483","possible_hits":"10",},
{"lineNum":"   98","line":"            info!(\"\\t{:?} is a duplicate\", f);","class":"linePartCov","hits":"4","order":"3488","possible_hits":"8",},
{"lineNum":"   99","line":"            println!(\"\\t{:?} is a duplicate\", f);","class":"lineCov","hits":"2","order":"3489","possible_hits":"2",},
{"lineNum":"  100","line":"            // keep track of how much space we could save (in bytes)"},
{"lineNum":"  101","line":"            save_size += size;","class":"linePartCov","hits":"2","order":"3491","possible_hits":"3",},
{"lineNum":"  102","line":"        }"},
{"lineNum":"  103","line":"        //log the amount of space that could be saved"},
{"lineNum":"  104","line":"        info!(","class":"linePartCov","hits":"4","order":"3492","possible_hits":"8",},
{"lineNum":"  105","line":"            \"You can save {} bytes by deduplicating this file\","},
{"lineNum":"  106","line":"            save_size"},
{"lineNum":"  107","line":"        );"},
{"lineNum":"  108","line":"        save_size","class":"lineCov","hits":"1","order":"3493","possible_hits":"1",},
{"lineNum":"  109","line":"    }","class":"linePartCov","hits":"1","order":"3494","possible_hits":"2",},
{"lineNum":"  110","line":"}"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"// implement `act()` for a FileDeleter"},
{"lineNum":"  113","line":"impl<V: VFS, S: Selector<V>> FileActor<V, S> for FileDeleter<V, S> {"},
{"lineNum":"  114","line":"    /// Print what files are duplicated and have been deleted, which one is considered"},
{"lineNum":"  115","line":"    /// the \'true\', and how much space has been freed"},
{"lineNum":"  116","line":"    fn act(&mut self, dups: Duplicates) -> u64 {","class":"linePartCov","hits":"2","order":"4390","possible_hits":"32",},
{"lineNum":"  117","line":"        //Get the file we arn\'t deleteing from the selector"},
{"lineNum":"  118","line":"        let real = self.selector.select(&dups);","class":"lineCov","hits":"1","order":"4393","possible_hits":"1",},
{"lineNum":"  119","line":"        let size = self.vfs","class":"lineCov","hits":"5","order":"4394","possible_hits":"5",},
{"lineNum":"  120","line":"            .get_file(real)","class":"lineCov","hits":"1","order":"4396","possible_hits":"1",},
{"lineNum":"  121","line":"            .expect(\"Failed to get file from path\")"},
{"lineNum":"  122","line":"            .get_metadata()"},
{"lineNum":"  123","line":"            .expect(\"Failed to get file metadata\")"},
{"lineNum":"  124","line":"            .get_len(); //get the size from the filesystem","class":"linePartCov","hits":"1","order":"4399","possible_hits":"2",},
{"lineNum":"  125","line":"        let mut save_size = 0;","class":"lineCov","hits":"1","order":"4400","possible_hits":"1",},
{"lineNum":"  126","line":"        //Log which file we are not deleting"},
{"lineNum":"  127","line":"        info!(\"{:?} is the true file\", real);","class":"linePartCov","hits":"4","order":"4401","possible_hits":"8",},
{"lineNum":"  128","line":"        // iterate over all other duplicates"},
{"lineNum":"  129","line":"        for f in dups.0.iter().filter(|&f| f.as_path() != real) {","class":"lineCov","hits":"9","order":"4402","possible_hits":"9",},
{"lineNum":"  130","line":"            // log that we will delete them"},
{"lineNum":"  131","line":"            info!(\"\\tDeleting {:?}...\", f);","class":"linePartCov","hits":"4","order":"4407","possible_hits":"8",},
{"lineNum":"  132","line":"            self.vfs.rm_file(f).expect(\"Couldn\'t delete file\");","class":"lineCov","hits":"1","order":"4411","possible_hits":"1",},
{"lineNum":"  133","line":"            // delete vfs handles logging and error printing in the case of errors"},
{"lineNum":"  134","line":"            save_size += size; //and increment the amount of space freed","class":"linePartCov","hits":"2","order":"4414","possible_hits":"3",},
{"lineNum":"  135","line":"        }"},
{"lineNum":"  136","line":"        //log the amount of space freed"},
{"lineNum":"  137","line":"        info!(\"You saved {} bytes by deduplicating this file\", save_size);","class":"linePartCov","hits":"4","order":"4422","possible_hits":"8",},
{"lineNum":"  138","line":"        save_size","class":"lineCov","hits":"1","order":"4428","possible_hits":"1",},
{"lineNum":"  139","line":"    }","class":"linePartCov","hits":"1","order":"4429","possible_hits":"2",},
{"lineNum":"  140","line":"}"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"// implement `act()` for a FileLinker"},
{"lineNum":"  143","line":"impl<V: VFS, S: Selector<V>> FileActor<V, S> for FileLinker<V, S> {"},
{"lineNum":"  144","line":"    /// Print which file is the \'true\' and which have been replaced with hardlinks to"},
{"lineNum":"  145","line":"    /// the that file (and are thus effectively that file), along with"},
{"lineNum":"  146","line":"    /// how much space has been freed"},
{"lineNum":"  147","line":"    fn act(&mut self, dups: Duplicates) -> u64 {","class":"linePartCov","hits":"2","order":"4167","possible_hits":"7",},
{"lineNum":"  148","line":"        // Select the File:"},
{"lineNum":"  149","line":"        // get the file, metadata, size, and device from the vfs"},
{"lineNum":"  150","line":"        let real = self.selector.select(&dups);","class":"lineCov","hits":"1","order":"4168","possible_hits":"1",},
{"lineNum":"  151","line":"        let real_file = self.vfs.get_file(real).expect(\"Couldn\'t find link dst\");","class":"lineCov","hits":"2","order":"4169","possible_hits":"2",},
{"lineNum":"  152","line":"        let real_md = real_file.get_metadata().expect(\"Couldn\'t get link dst md\");","class":"linePartCov","hits":"2","order":"4170","possible_hits":"4",},
{"lineNum":"  153","line":"        let real_dev = real_md.get_device().expect(\"Couldn\'t get link dst device\");","class":"linePartCov","hits":"2","order":"4171","possible_hits":"4",},
{"lineNum":"  154","line":"        let size = real_md.get_len();","class":"linePartCov","hits":"2","order":"4175","possible_hits":"3",},
{"lineNum":"  155","line":"        let mut save_size = 0;","class":"lineCov","hits":"1","order":"4176","possible_hits":"1",},
{"lineNum":"  156","line":"        //log the \'real\' file"},
{"lineNum":"  157","line":"        info!(\"{:?} is the true file\", real);","class":"linePartCov","hits":"2","order":"4177","possible_hits":"3",},
{"lineNum":"  158","line":"        // iterate over all other duplicates"},
{"lineNum":"  159","line":"        for f in dups.0.iter().filter(|&f| f.as_path() != real) {","class":"linePartCov","hits":"5","order":"4178","possible_hits":"11",},
{"lineNum":"  160","line":"            // Check that we can create a hardlink"},
{"lineNum":"  161","line":"            let f_dir = f.parent().unwrap(); // can\'t be a dir so can\'t be \"/\"","class":"lineCov","hits":"3","order":"4179","possible_hits":"3",},
{"lineNum":"  162","line":"            let f_dir_file = self.vfs","class":"lineCov","hits":"3","order":"4183","possible_hits":"3",},
{"lineNum":"  163","line":"                .get_file(f_dir)","class":"lineCov","hits":"1","order":"4184","possible_hits":"1",},
{"lineNum":"  164","line":"                .expect(\"Couldn\'t find link src parent\");"},
{"lineNum":"  165","line":"            let f_dir_md = f_dir_file","class":"linePartCov","hits":"2","order":"4185","possible_hits":"3",},
{"lineNum":"  166","line":"                .get_metadata()"},
{"lineNum":"  167","line":"                .expect(\"Couldn\'t get link src parent md\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  168","line":"            let f_dir_dev = f_dir_md","class":"linePartCov","hits":"2","order":"4186","possible_hits":"3",},
{"lineNum":"  169","line":"                .get_device()"},
{"lineNum":"  170","line":"                .expect(\"Couldn\'t get link src parent device\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  171","line":"            // If not, inform the user."},
{"lineNum":"  172","line":"            if real_dev != f_dir_dev {","class":"lineCov","hits":"3","order":"4187","possible_hits":"3",},
{"lineNum":"  173","line":"                warn!(","class":"linePartCov","hits":"2","order":"4190","possible_hits":"3",},
{"lineNum":"  174","line":"                    \"You tried to create a link from directory `{:?}` on device {:?} \\"},
{"lineNum":"  175","line":"                     to the file `{:?}` on device {:?}.\\n\\"},
{"lineNum":"  176","line":"                     Hard-linking across devices is generally an error. \\"},
{"lineNum":"  177","line":"                     Skipping...\","},
{"lineNum":"  178","line":"                    f_dir,"},
{"lineNum":"  179","line":"                    f_dir_dev,"},
{"lineNum":"  180","line":"                    real,"},
{"lineNum":"  181","line":"                    real_dev"},
{"lineNum":"  182","line":"                );"},
{"lineNum":"  183","line":"            } else {"},
{"lineNum":"  184","line":"                //If we can, log and print that we are deleting of the file"},
{"lineNum":"  185","line":"                info!(\"\\tDeleting {:?}...\", f);","class":"linePartCov","hits":"2","order":"4227","possible_hits":"3",},
{"lineNum":"  186","line":"                //println!(\"\\tDeleting `{:?}`...\", f);"},
{"lineNum":"  187","line":"                //And deleting it."},
{"lineNum":"  188","line":"                self.vfs.rm_file(f).expect(\"Couldn\'t delete file\");","class":"linePartCov","hits":"1","order":"4228","possible_hits":"2",},
{"lineNum":"  189","line":"                //log and print that we are replacing it with a link"},
{"lineNum":"  190","line":"                info!(\"\\t\\tand replacing it with a link to {:?}...\", real);","class":"linePartCov","hits":"2","order":"4271","possible_hits":"3",},
{"lineNum":"  191","line":"                //println!(\"\\t\\tand replacing it with a link to `{:?}`...\", real);"},
{"lineNum":"  192","line":"                //and link."},
{"lineNum":"  193","line":"                self.vfs.make_link(f, real).expect(\"Couldn\'t create link\");","class":"linePartCov","hits":"1","order":"4272","possible_hits":"2",},
{"lineNum":"  194","line":"                //and increment the amount of space we save"},
{"lineNum":"  195","line":"                save_size += size;","class":"linePartCov","hits":"2","order":"4306","possible_hits":"3",},
{"lineNum":"  196","line":"            }"},
{"lineNum":"  197","line":"        }","class":"linePartCov","hits":"1","order":"4191","possible_hits":"3",},
{"lineNum":"  198","line":"        // and log and print how much space was saved"},
{"lineNum":"  199","line":"        info!(\"You saved {} bytes by deduplicating this file\", save_size);","class":"linePartCov","hits":"2","order":"4192","possible_hits":"3",},
{"lineNum":"  200","line":"        //println!(\"You saved {} bytes by deduplicating this file\", save_size);"},
{"lineNum":"  201","line":"        save_size","class":"lineCov","hits":"1","order":"4193","possible_hits":"1",},
{"lineNum":"  202","line":"    }","class":"linePartCov","hits":"1","order":"4194","possible_hits":"4",},
{"lineNum":"  203","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "smllr-cd1387de2be9f35d", "date" : "2017-12-06 19:01:08", "instrumented" : 71, "covered" : 69,};
var merged_data = [];
