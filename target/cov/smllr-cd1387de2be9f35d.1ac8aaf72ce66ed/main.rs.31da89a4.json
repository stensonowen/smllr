var data = {lines:[
{"lineNum":"    1","line":"//! Identify and handle duplicate files in a fast and extensible way","class":"linePartCov","hits":"2","order":"1065","possible_hits":"3",},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"extern crate clap;"},
{"lineNum":"    4","line":"extern crate env_logger;"},
{"lineNum":"    5","line":"#[macro_use]"},
{"lineNum":"    6","line":"extern crate log;"},
{"lineNum":"    7","line":"extern crate md5;"},
{"lineNum":"    8","line":"extern crate regex;"},
{"lineNum":"    9","line":"extern crate tiny_keccak;"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"// import from external libraries"},
{"lineNum":"   12","line":"use clap::{App, Arg};"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"// import from standard library"},
{"lineNum":"   15","line":"use std::path::Path;"},
{"lineNum":"   16","line":"use std::ffi::OsStr;"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"// import from our own modules"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"mod helpers;"},
{"lineNum":"   21","line":"use helpers::prettify_bytes;"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"pub mod walker;"},
{"lineNum":"   24","line":"use walker::DirWalker;"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"pub mod vfs;"},
{"lineNum":"   27","line":"pub use vfs::{RealFileSystem, TestFileSystem};"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"pub mod catalog;"},
{"lineNum":"   30","line":"use catalog::FileCataloger;"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"pub mod actor;"},
{"lineNum":"   33","line":"use actor::{FileActor, FileDeleter, FileLinker, FilePrinter};"},
{"lineNum":"   34","line":"use actor::selector::{DateSelect, PathSelect, Selector};"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"pub mod hash;"},
{"lineNum":"   37","line":"use hash::{Md5Sum, Sha3Sum};"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"fn main() {"},
{"lineNum":"   40","line":"    // build arg parser"},
{"lineNum":"   41","line":"    let matches = App::new(\"smllr\")"},
{"lineNum":"   42","line":"        // paths without an argument after"},
{"lineNum":"   43","line":"        .arg(Arg::with_name(\"paths\")"},
{"lineNum":"   44","line":"             .help(\"List of files or directories to deduplicate\")"},
{"lineNum":"   45","line":"             .multiple(true)"},
{"lineNum":"   46","line":"             .takes_value(true)"},
{"lineNum":"   47","line":"             .required(true)"},
{"lineNum":"   48","line":"             )"},
{"lineNum":"   49","line":"        // paths to skip (`--skip /tmp --skip /usr`)"},
{"lineNum":"   50","line":"        .arg(Arg::with_name(\"bad_paths\")"},
{"lineNum":"   51","line":"             .long(\"skip\")"},
{"lineNum":"   52","line":"             .short(\"x\")"},
{"lineNum":"   53","line":"             .help(\"A folder or filename to omit\")"},
{"lineNum":"   54","line":"             .multiple(true)"},
{"lineNum":"   55","line":"             .takes_value(true)"},
{"lineNum":"   56","line":"             )"},
{"lineNum":"   57","line":"        // regex to skip / include"},
{"lineNum":"   58","line":"        .arg(Arg::with_name(\"bad_regex\")"},
{"lineNum":"   59","line":"             .short(\"o\")"},
{"lineNum":"   60","line":"             .long(\"skip-re\")"},
{"lineNum":"   61","line":"             .help(\"Files whose filenames match a blacklisted regex will be skipped\")"},
{"lineNum":"   62","line":"             .multiple(true)"},
{"lineNum":"   63","line":"             .takes_value(true)"},
{"lineNum":"   64","line":"             )"},
{"lineNum":"   65","line":"        // paranoid flag"},
{"lineNum":"   66","line":"        .arg(Arg::with_name(\"paranoid\")"},
{"lineNum":"   67","line":"             .short(\"p\")"},
{"lineNum":"   68","line":"             .long(\"paranoid\")"},
{"lineNum":"   69","line":"             .help(\"Use SHA-3 to hash files instead of MD5\")"},
{"lineNum":"   70","line":"             )"},
{"lineNum":"   71","line":"        // determine selector"},
{"lineNum":"   72","line":"        .arg(Arg::with_name(\"path-len\")"},
{"lineNum":"   73","line":"             .long(\"path-len\")"},
{"lineNum":"   74","line":"             .conflicts_with(\"newest-file\")"},
{"lineNum":"   75","line":"             .help(\"Preserve the file closest to the root (default)\")"},
{"lineNum":"   76","line":"             )"},
{"lineNum":"   77","line":"        .arg(Arg::with_name(\"newest-file\")"},
{"lineNum":"   78","line":"             .long(\"newest-file\")"},
{"lineNum":"   79","line":"             .help(\"Preserve the file that was modified most recently\")"},
{"lineNum":"   80","line":"             )"},
{"lineNum":"   81","line":"        .arg(Arg::with_name(\"invert-selector\")"},
{"lineNum":"   82","line":"             .long(\"invert-selector\")"},
{"lineNum":"   83","line":"             .help(\"Invert the selector criterion (e.g. preserve the deepest file)\")"},
{"lineNum":"   84","line":"             )"},
{"lineNum":"   85","line":"        // determine actor"},
{"lineNum":"   86","line":"        .arg(Arg::with_name(\"print\")"},
{"lineNum":"   87","line":"             .long(\"print\")"},
{"lineNum":"   88","line":"             .conflicts_with(\"delete\")"},
{"lineNum":"   89","line":"             .conflicts_with(\"link\")"},
{"lineNum":"   90","line":"             .help(\"Print duplicate files (default)\")"},
{"lineNum":"   91","line":"             )"},
{"lineNum":"   92","line":"        .arg(Arg::with_name(\"delete\")"},
{"lineNum":"   93","line":"             .conflicts_with(\"link\")"},
{"lineNum":"   94","line":"             .long(\"delete\")"},
{"lineNum":"   95","line":"             .help(\"Delete duplicate files\")"},
{"lineNum":"   96","line":"             )"},
{"lineNum":"   97","line":"        .arg(Arg::with_name(\"link\")"},
{"lineNum":"   98","line":"             .long(\"link\")"},
{"lineNum":"   99","line":"             .help(\"Replace duplicate files with hard links\")"},
{"lineNum":"  100","line":"             )"},
{"lineNum":"  101","line":"        .get_matches();"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    // decide which files are fair game"},
{"lineNum":"  104","line":"    let dirs: Vec<&OsStr> = matches"},
{"lineNum":"  105","line":"        .values_of_os(\"paths\")"},
{"lineNum":"  106","line":"        .expect(\"Failed to get `paths` from the command line arguments\")"},
{"lineNum":"  107","line":"        .collect();"},
{"lineNum":"  108","line":"    // if the user supplied blacklisted paths, collect them"},
{"lineNum":"  109","line":"    let dirs_n: Vec<&OsStr> = if matches.is_present(\"bad_paths\") {"},
{"lineNum":"  110","line":"        matches"},
{"lineNum":"  111","line":"            .values_of_os(\"bad_paths\")"},
{"lineNum":"  112","line":"            .expect(\"Failed to get `bad_paths`\")"},
{"lineNum":"  113","line":"            .collect()"},
{"lineNum":"  114","line":"    } else {"},
{"lineNum":"  115","line":"        vec![]"},
{"lineNum":"  116","line":"    };"},
{"lineNum":"  117","line":"    // if the user supplied blacklisted file regexes, collect them"},
{"lineNum":"  118","line":"    let pats_n: Vec<_> = if matches.is_present(\"bad_regex\") {"},
{"lineNum":"  119","line":"        matches"},
{"lineNum":"  120","line":"            .values_of(\"bad_regex\")"},
{"lineNum":"  121","line":"            .expect(\"Failed to get `bad_regex`\")"},
{"lineNum":"  122","line":"            .collect()"},
{"lineNum":"  123","line":"    } else {"},
{"lineNum":"  124","line":"        vec![]"},
{"lineNum":"  125","line":"    };"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    // print log info to stderr"},
{"lineNum":"  128","line":"    // to alter granularity, set environmental variable RUST_LOG"},
{"lineNum":"  129","line":"    // e.g. `RUST_LOG=debug ./smllr ... 2> /tmp/smllr_log`"},
{"lineNum":"  130","line":"    env_logger::init().expect(\"Failed to initialize logging\");"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    // create and customize a DirWalker over the real filesystem"},
{"lineNum":"  133","line":"    // collect all relevant files"},
{"lineNum":"  134","line":"    let fs = RealFileSystem;"},
{"lineNum":"  135","line":"    let paths: Vec<&Path> = dirs.iter().map(Path::new).collect();"},
{"lineNum":"  136","line":"    let dw = DirWalker::new(fs, &paths)"},
{"lineNum":"  137","line":"        .blacklist_folders(dirs_n)"},
{"lineNum":"  138","line":"        .blacklist_patterns(pats_n);"},
{"lineNum":"  139","line":"    let files = dw.traverse_all();"},
{"lineNum":"  140","line":"    println!(\"Traversing {} files...\", files.len());"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"    // catalog all files from the DirWalker"},
{"lineNum":"  143","line":"    // duplicates are identified as files are inserted one at a time"},
{"lineNum":"  144","line":"    // can\'t combine code because Sha3Sum and Md5Sum might be different sizes"},
{"lineNum":"  145","line":"    let repeats = if matches.is_present(\"paranoid\") {"},
{"lineNum":"  146","line":"        info!(\"Using SHA-3\");"},
{"lineNum":"  147","line":"        let mut fc: FileCataloger<_, Sha3Sum> = FileCataloger::new(fs);"},
{"lineNum":"  148","line":"        files.iter().for_each(|f| fc.insert(f));"},
{"lineNum":"  149","line":"        fc.get_repeats()"},
{"lineNum":"  150","line":"    } else {"},
{"lineNum":"  151","line":"        info!(\"Using MD5\");"},
{"lineNum":"  152","line":"        let mut fc: FileCataloger<_, Md5Sum> = FileCataloger::new(fs);"},
{"lineNum":"  153","line":"        files.iter().for_each(|f| fc.insert(f));"},
{"lineNum":"  154","line":"        fc.get_repeats()"},
{"lineNum":"  155","line":"    };"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"    // use a Box to put the Selector and Actor on the heap as trait objects"},
{"lineNum":"  158","line":"    // different selectors or actors are different sizes (e.g. test_fs contains"},
{"lineNum":"  159","line":"    //  lots of data but real_fs has none), and the stack size must be known"},
{"lineNum":"  160","line":"    //  at compile time but the selector type is only known at runtime"},
{"lineNum":"  161","line":"    //  all boxes are the same size (a pointer)"},
{"lineNum":"  162","line":"    // this has the same small performance hit as C++ inheritance because it"},
{"lineNum":"  163","line":"    //  is basically a vtable"},
{"lineNum":"  164","line":"    // this works because we impl\'d these traits for Box<T>"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"    // select which of the duplicates are \"true\" and act on the others"},
{"lineNum":"  167","line":"    let mut selector: Box<Selector<RealFileSystem>> = {"},
{"lineNum":"  168","line":"        // `--newest-file` or `--path-len` (default)"},
{"lineNum":"  169","line":"        if matches.is_present(\"newest-file\") {"},
{"lineNum":"  170","line":"            Box::new(DateSelect::new(fs))"},
{"lineNum":"  171","line":"        } else {"},
{"lineNum":"  172","line":"            Box::new(PathSelect::new(fs))"},
{"lineNum":"  173","line":"        }"},
{"lineNum":"  174","line":"    };"},
{"lineNum":"  175","line":"    // invert selector if necessary (e.g. use longest path instead of shortest)"},
{"lineNum":"  176","line":"    if matches.is_present(\"invert-selector\") {"},
{"lineNum":"  177","line":"        selector.reverse();"},
{"lineNum":"  178","line":"    }"},
{"lineNum":"  179","line":"    let selector = selector; // remove mutability"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"    // determine what action should be taken on non-selected files"},
{"lineNum":"  182","line":"    let mut actor: Box<FileActor<RealFileSystem, Box<Selector<RealFileSystem>>>> = {"},
{"lineNum":"  183","line":"        // `--link`, `--delete`, or `--print` (default)"},
{"lineNum":"  184","line":"        if matches.is_present(\"link\") {"},
{"lineNum":"  185","line":"            Box::new(FileLinker::new(fs, selector))"},
{"lineNum":"  186","line":"        } else if matches.is_present(\"delete\") {"},
{"lineNum":"  187","line":"            Box::new(FileDeleter::new(fs, selector))"},
{"lineNum":"  188","line":"        } else {"},
{"lineNum":"  189","line":"            Box::new(FilePrinter::new(fs, selector))"},
{"lineNum":"  190","line":"        }"},
{"lineNum":"  191","line":"    };"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"    // act on all sets of duplicates"},
{"lineNum":"  194","line":"    if repeats.is_empty() {"},
{"lineNum":"  195","line":"        println!(\"No duplicates found\");"},
{"lineNum":"  196","line":"    } else {"},
{"lineNum":"  197","line":"        println!(\"Acting on {} sets of duplicates...\", repeats.len());"},
{"lineNum":"  198","line":"        let mut saved_bytes = 0;"},
{"lineNum":"  199","line":"        for dups in repeats {"},
{"lineNum":"  200","line":"            saved_bytes += actor.act(dups);"},
{"lineNum":"  201","line":"        }"},
{"lineNum":"  202","line":"        println!(\"Idenfied {}\", prettify_bytes(saved_bytes));"},
{"lineNum":"  203","line":"    }"},
{"lineNum":"  204","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "smllr-cd1387de2be9f35d", "date" : "2017-12-06 19:01:08", "instrumented" : 1, "covered" : 1,};
var merged_data = [];
