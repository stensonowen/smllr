var data = {lines:[
{"lineNum":"    1","line":"//! Traverse a filesystem and identify files of interest"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"use std::path::{Path, PathBuf};"},
{"lineNum":"    4","line":"use std::{env, io};"},
{"lineNum":"    5","line":"use std::ffi::OsStr;"},
{"lineNum":"    6","line":"use std::collections::HashSet;"},
{"lineNum":"    7","line":"use regex::{self, Regex};"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"use vfs::{File, FileType, MetaData, VFS};"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"mod test; //include unit tests"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/// Customizable object to traverse a series of directories, efficiently identifying files and"},
{"lineNum":"   14","line":"/// omitting files in certain paths or that match certain patterns"},
{"lineNum":"   15","line":"#[derive(Debug)]"},
{"lineNum":"   16","line":"pub struct DirWalker<T: VFS> {"},
{"lineNum":"   17","line":"    // files to include/exclude"},
{"lineNum":"   18","line":"    directories: Vec<PathBuf>,"},
{"lineNum":"   19","line":"    blacklist_dirs: Vec<PathBuf>,"},
{"lineNum":"   20","line":"    blacklist_patterns: Vec<Regex>,"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"    // keep track of the files and folders we\'ve seen"},
{"lineNum":"   23","line":"    // `files` will only be files, `folders` will only be directories"},
{"lineNum":"   24","line":"    // symlinks will be resolved to their targets or discarded"},
{"lineNum":"   25","line":"    files: HashSet<PathBuf>,"},
{"lineNum":"   26","line":"    folders: HashSet<PathBuf>,"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"    // file system being traversed"},
{"lineNum":"   29","line":"    vfs: T,"},
{"lineNum":"   30","line":"}"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"impl<M, F, V> DirWalker<V>"},
{"lineNum":"   33","line":"where"},
{"lineNum":"   34","line":"    V: VFS<FileIter = F>,"},
{"lineNum":"   35","line":"    F: File<MD = M>,"},
{"lineNum":"   36","line":"    M: MetaData,"},
{"lineNum":"   37","line":"{"},
{"lineNum":"   38","line":"    /// Helper function to convert relative paths to absolute paths if necessary"},
{"lineNum":"   39","line":"    /// Can panic if any paths are relative and if the current directory is unknown"},
{"lineNum":"   40","line":"    fn get_abs_paths(dirs: &[&Path]) -> Vec<PathBuf> {","class":"lineCov","hits":"2","order":"5196","possible_hits":"2",},
{"lineNum":"   41","line":"        // if any paths are relative, append them to the current working dir"},
{"lineNum":"   42","line":"        // if getting the cwd fails, the whole process should abort"},
{"lineNum":"   43","line":"        let abs_paths: io::Result<Vec<PathBuf>> = dirs.into_iter()","class":"lineCov","hits":"1","order":"5197","possible_hits":"1",},
{"lineNum":"   44","line":"            .map(|dir| {","class":"linePartCov","hits":"2","order":"5202","possible_hits":"3",},
{"lineNum":"   45","line":"                if dir.is_absolute() {","class":"linePartCov","hits":"2","order":"5203","possible_hits":"3",},
{"lineNum":"   46","line":"                    Ok(dir.to_path_buf())","class":"lineCov","hits":"2","order":"5206","possible_hits":"2",},
{"lineNum":"   47","line":"                } else {"},
{"lineNum":"   48","line":"                    debug!(\"Converting `{:?}` to absolute path\", dir);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   49","line":"                    env::current_dir().map(|cwd| cwd.join(dir))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   50","line":"                }"},
{"lineNum":"   51","line":"            })","class":"lineCov","hits":"1","order":"5207","possible_hits":"1",},
{"lineNum":"   52","line":"            .collect();"},
{"lineNum":"   53","line":"        abs_paths.unwrap_or_else(|e| {","class":"linePartCov","hits":"1","order":"5217","possible_hits":"4",},
{"lineNum":"   54","line":"            panic!(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   55","line":"                \"Couldn\'t retrieve current working directory; \\"},
{"lineNum":"   56","line":"                 try using absolute paths or fix your terminal.\\n\\"},
{"lineNum":"   57","line":"                 Error: {}\","},
{"lineNum":"   58","line":"                e"},
{"lineNum":"   59","line":"            )"},
{"lineNum":"   60","line":"        })","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   61","line":"    }","class":"linePartCov","hits":"1","order":"5218","possible_hits":"2",},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    /// Create a new DirWalker from a list of directories"},
{"lineNum":"   64","line":"    pub fn new<P: AsRef<Path>>(vfs: V, dirs: &[P]) -> DirWalker<V> {","class":"linePartCov","hits":"2","order":"5178","possible_hits":"8",},
{"lineNum":"   65","line":"        let dirs: Vec<&Path> = dirs.iter().map(|p| p.as_ref()).collect();","class":"lineCov","hits":"4","order":"5179","possible_hits":"4",},
{"lineNum":"   66","line":"        let abs_paths = Self::get_abs_paths(&dirs);","class":"lineCov","hits":"2","order":"5195","possible_hits":"2",},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"        DirWalker {","class":"lineCov","hits":"1","order":"5232","possible_hits":"1",},
{"lineNum":"   69","line":"            directories: abs_paths,","class":"lineCov","hits":"1","order":"5219","possible_hits":"1",},
{"lineNum":"   70","line":"            blacklist_dirs: vec![],","class":"lineCov","hits":"1","order":"5220","possible_hits":"1",},
{"lineNum":"   71","line":"            blacklist_patterns: vec![],","class":"lineCov","hits":"1","order":"5221","possible_hits":"1",},
{"lineNum":"   72","line":"            files: HashSet::new(),","class":"lineCov","hits":"1","order":"5226","possible_hits":"1",},
{"lineNum":"   73","line":"            folders: HashSet::new(),","class":"lineCov","hits":"1","order":"5230","possible_hits":"1",},
{"lineNum":"   74","line":"            vfs: vfs,","class":"lineCov","hits":"1","order":"5231","possible_hits":"1",},
{"lineNum":"   75","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   76","line":"    }","class":"linePartCov","hits":"2","order":"5233","possible_hits":"4",},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"    /// Build up a DirWalker with a list of blacklisted folders"},
{"lineNum":"   79","line":"    pub fn blacklist_folders(mut self, bl: Vec<&OsStr>) -> Self {","class":"linePartCov","hits":"2","order":"6113","possible_hits":"8",},
{"lineNum":"   80","line":"        let paths: Vec<_> = bl.into_iter().map(|s| Path::new(s)).collect();","class":"lineCov","hits":"4","order":"6114","possible_hits":"4",},
{"lineNum":"   81","line":"        let abs_paths = Self::get_abs_paths(&paths);","class":"lineCov","hits":"1","order":"6117","possible_hits":"1",},
{"lineNum":"   82","line":"        self.blacklist_dirs = abs_paths;","class":"linePartCov","hits":"2","order":"6118","possible_hits":"3",},
{"lineNum":"   83","line":"        self","class":"lineCov","hits":"1","order":"6119","possible_hits":"1",},
{"lineNum":"   84","line":"    }","class":"linePartCov","hits":"2","order":"6120","possible_hits":"5",},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    /// Build up a DirWalker with a list of blacklisted path patterns"},
{"lineNum":"   87","line":"    pub fn blacklist_patterns(mut self, bl: Vec<&str>) -> Self {","class":"linePartCov","hits":"2","order":"5235","possible_hits":"3",},
{"lineNum":"   88","line":"        let regexes: Result<Vec<Regex>, regex::Error> ="},
{"lineNum":"   89","line":"            bl.into_iter().map(|s| Regex::new(s)).collect();","class":"linePartCov","hits":"3","order":"5237","possible_hits":"5",},
{"lineNum":"   90","line":"        let regexes = regexes.unwrap_or_else(|e| panic!(\"Couldn\'t parse regex; \\nError: {}\", e));","class":"linePartCov","hits":"1","order":"5823","possible_hits":"3",},
{"lineNum":"   91","line":"        self.blacklist_patterns = regexes;","class":"lineCov","hits":"1","order":"5824","possible_hits":"1",},
{"lineNum":"   92","line":"        self","class":"lineCov","hits":"1","order":"5825","possible_hits":"1",},
{"lineNum":"   93","line":"    }","class":"linePartCov","hits":"1","order":"5826","possible_hits":"2",},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    /// Determine whether a file is in scope (i.e. not seen already or blacklisted)"},
{"lineNum":"   96","line":"    fn should_handle_file(&self, path: &Path) -> bool {","class":"lineCov","hits":"2","order":"5440","possible_hits":"2",},
{"lineNum":"   97","line":"        // only handle files that"},
{"lineNum":"   98","line":"        //  1) haven\'t been seen before and"},
{"lineNum":"   99","line":"        //  2) don\'t match a blacklist regex pattern"},
{"lineNum":"  100","line":"        //      NOTE: if a path is invalid unicode it will never match a pattern"},
{"lineNum":"  101","line":"        if self.files.contains(path) {","class":"lineCov","hits":"3","order":"5441","possible_hits":"3",},
{"lineNum":"  102","line":"            // have traversed this file before"},
{"lineNum":"  103","line":"            false","class":"lineCov","hits":"1","order":"5478","possible_hits":"1",},
{"lineNum":"  104","line":"        } else if let Some(path_str) = path.to_str() {","class":"linePartCov","hits":"2","order":"5442","possible_hits":"3",},
{"lineNum":"  105","line":"            // handle file if all regexes do NOT match"},
{"lineNum":"  106","line":"            self.blacklist_patterns.iter().all(|re| {","class":"lineCov","hits":"4","order":"5443","possible_hits":"4",},
{"lineNum":"  107","line":"                if let Some(m) = re.find(path_str) {","class":"linePartCov","hits":"3","order":"5972","possible_hits":"4",},
{"lineNum":"  108","line":"                    (m.start(), m.end()) != (0, path_str.len())","class":"lineCov","hits":"2","order":"5983","possible_hits":"2",},
{"lineNum":"  109","line":"                } else {"},
{"lineNum":"  110","line":"                    true","class":"lineCov","hits":"1","order":"5996","possible_hits":"1",},
{"lineNum":"  111","line":"                }"},
{"lineNum":"  112","line":"            })","class":"lineCov","hits":"1","order":"5995","possible_hits":"1",},
{"lineNum":"  113","line":"        } else {"},
{"lineNum":"  114","line":"            // invalid unicode: not regex blacklist"},
{"lineNum":"  115","line":"            true","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  116","line":"        }"},
{"lineNum":"  117","line":"    }","class":"linePartCov","hits":"1","order":"5444","possible_hits":"2",},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"    /// Determine whether a folder is in scope(i.e. not seen already or blacklisted)"},
{"lineNum":"  120","line":"    fn should_traverse_folder(&self, path: &Path) -> bool {","class":"lineCov","hits":"2","order":"5379","possible_hits":"2",},
{"lineNum":"  121","line":"        // only look into folders that"},
{"lineNum":"  122","line":"        //  1) haven\'t been seen before,"},
{"lineNum":"  123","line":"        //  2) don\'t match a folder blacklist, and"},
{"lineNum":"  124","line":"        //  3) don\'t match a regex pattern blacklist"},
{"lineNum":"  125","line":"        //      NOTE: again, bad unicode paths will not match any regex"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"        if self.folders.contains(path) {","class":"lineCov","hits":"3","order":"5380","possible_hits":"3",},
{"lineNum":"  128","line":"            // have traversed this folder before"},
{"lineNum":"  129","line":"            false","class":"lineCov","hits":"1","order":"5479","possible_hits":"1",},
{"lineNum":"  130","line":"        } else if self.blacklist_dirs.iter().any(|dir| path.starts_with(dir)) {","class":"lineCov","hits":"5","order":"5389","possible_hits":"5",},
{"lineNum":"  131","line":"            // the directory has been blacklisted"},
{"lineNum":"  132","line":"            false","class":"lineCov","hits":"1","order":"6132","possible_hits":"1",},
{"lineNum":"  133","line":"        } else if let Some(path_str) = path.to_str() {","class":"linePartCov","hits":"2","order":"5391","possible_hits":"3",},
{"lineNum":"  134","line":"            // only traverse if all patterns do NOT match"},
{"lineNum":"  135","line":"            self.blacklist_patterns.iter().all(|re| {","class":"lineCov","hits":"4","order":"5392","possible_hits":"4",},
{"lineNum":"  136","line":"                if let Some(m) = re.find(path_str) {","class":"linePartCov","hits":"2","order":"5828","possible_hits":"4",},
{"lineNum":"  137","line":"                    // skip if the match is the whole thing"},
{"lineNum":"  138","line":"                    (m.start(), m.end()) != (0, path_str.len())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  139","line":"                } else {"},
{"lineNum":"  140","line":"                    // no match: traverse"},
{"lineNum":"  141","line":"                    true","class":"lineCov","hits":"1","order":"5969","possible_hits":"1",},
{"lineNum":"  142","line":"                }"},
{"lineNum":"  143","line":"            })","class":"lineCov","hits":"1","order":"5970","possible_hits":"1",},
{"lineNum":"  144","line":"        } else {"},
{"lineNum":"  145","line":"            // invalid unicode: don\'t try any regex matching"},
{"lineNum":"  146","line":"            true","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  147","line":"        }"},
{"lineNum":"  148","line":"    }","class":"linePartCov","hits":"1","order":"5393","possible_hits":"2",},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"    /// Perform operation on a file: in this case just add it to a hashset"},
{"lineNum":"  151","line":"    fn handle_file(&mut self, path: &Path) {","class":"linePartCov","hits":"2","order":"5446","possible_hits":"3",},
{"lineNum":"  152","line":"        // do your thing: here just add to a field of filepaths"},
{"lineNum":"  153","line":"        trace!(\"\\tHANDLING FILE {:?}\", path);","class":"lineCov","hits":"3","order":"5447","possible_hits":"3",},
{"lineNum":"  154","line":"        let was_absent = self.files.insert(path.to_owned());","class":"lineCov","hits":"2","order":"5448","possible_hits":"2",},
{"lineNum":"  155","line":"        assert!(was_absent);","class":"lineCov","hits":"1","order":"5449","possible_hits":"1",},
{"lineNum":"  156","line":"    }","class":"lineCov","hits":"1","order":"5450","possible_hits":"1",},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"    /// Operate on a folder: iterate through its contents recursively"},
{"lineNum":"  159","line":"    pub fn traverse_folder(&mut self, path: &Path) {","class":"linePartCov","hits":"2","order":"5395","possible_hits":"5",},
{"lineNum":"  160","line":"        // assume should_handle_folder was called"},
{"lineNum":"  161","line":"        // mutually recursive with Self::dispatch_any_file (sorry mom)"},
{"lineNum":"  162","line":"        // a complex directory structure will be mirrored with a complex stack"},
{"lineNum":"  163","line":"        //  note this is only sorta how BS does it. his isn\'t the call stack"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"        let was_absent = self.folders.insert(path.to_owned());","class":"lineCov","hits":"2","order":"5396","possible_hits":"2",},
{"lineNum":"  166","line":"        assert!(was_absent);","class":"lineCov","hits":"1","order":"5402","possible_hits":"1",},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"        let contents = match self.vfs.list_dir(path) {","class":"lineCov","hits":"1","order":"5403","possible_hits":"1",},
{"lineNum":"  169","line":"            Ok(c) => c,","class":"lineCov","hits":"1","order":"5425","possible_hits":"1",},
{"lineNum":"  170","line":"            Err(e) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  171","line":"                warn!(\"Failed to list contents of dir {:?}: {}\", path, e);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  172","line":"                return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  173","line":"            }"},
{"lineNum":"  174","line":"        };","class":"linePartCov","hits":"1","order":"5426","possible_hits":"7",},
{"lineNum":"  175","line":"        for entry in contents {","class":"linePartCov","hits":"4","order":"5427","possible_hits":"6",},
{"lineNum":"  176","line":"            match entry {","class":"linePartCov","hits":"1","order":"5452","possible_hits":"10",},
{"lineNum":"  177","line":"                Ok(ref e) => self.dispatch_any_file(&e.get_path(), e.get_type().ok()),","class":"linePartCov","hits":"4","order":"5432","possible_hits":"5",},
{"lineNum":"  178","line":"                Err(e) => warn!(\"Failed to identify file in dir {:?}: {}\", path, e),","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  179","line":"            }","class":"linePartCov","hits":"1","order":"5453","possible_hits":"4",},
{"lineNum":"  180","line":"        }","class":"linePartCov","hits":"3","order":"5431","possible_hits":"9",},
{"lineNum":"  181","line":"    }","class":"linePartCov","hits":"2","order":"5480","possible_hits":"4",},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"    /// Check and possibly handle any filesystem object"},
{"lineNum":"  184","line":"    fn dispatch_any_file(&mut self, path: &Path, filetype: Option<FileType>) {","class":"linePartCov","hits":"2","order":"5261","possible_hits":"3",},
{"lineNum":"  185","line":"        // handle a file, traverse a directory, or follow a symlink"},
{"lineNum":"  186","line":"        let filetype = match filetype {","class":"lineCov","hits":"1","order":"5376","possible_hits":"1",},
{"lineNum":"  187","line":"            Some(ft) => ft,","class":"lineCov","hits":"2","order":"5262","possible_hits":"2",},
{"lineNum":"  188","line":"            None => match self.vfs.get_metadata(path) {","class":"lineCov","hits":"1","order":"5263","possible_hits":"1",},
{"lineNum":"  189","line":"                Ok(md) => md.get_type(),","class":"linePartCov","hits":"2","order":"5287","possible_hits":"3",},
{"lineNum":"  190","line":"                Err(e) => {","class":"lineCov","hits":"1","order":"5288","possible_hits":"1",},
{"lineNum":"  191","line":"                    warn!(\"Couldn\'t get metadata for {:?}: {}\", path, e);","class":"linePartCov","hits":"2","order":"5289","possible_hits":"3",},
{"lineNum":"  192","line":"                    return;","class":"lineCov","hits":"1","order":"5299","possible_hits":"1",},
{"lineNum":"  193","line":"                }"},
{"lineNum":"  194","line":"            },","class":"linePartCov","hits":"3","order":"5290","possible_hits":"7",},
{"lineNum":"  195","line":"        };"},
{"lineNum":"  196","line":"        match filetype {","class":"linePartCov","hits":"3","order":"5451","possible_hits":"4",},
{"lineNum":"  197","line":"            FileType::File => if self.should_handle_file(path) {","class":"lineCov","hits":"4","order":"5377","possible_hits":"4",},
{"lineNum":"  198","line":"                self.handle_file(path)","class":"lineCov","hits":"1","order":"5445","possible_hits":"1",},
{"lineNum":"  199","line":"            },"},
{"lineNum":"  200","line":"            FileType::Dir => if self.should_traverse_folder(path) {","class":"lineCov","hits":"3","order":"5378","possible_hits":"3",},
{"lineNum":"  201","line":"                self.traverse_folder(path)","class":"lineCov","hits":"1","order":"5394","possible_hits":"1",},
{"lineNum":"  202","line":"            },"},
{"lineNum":"  203","line":"            FileType::Symlink => match self.vfs.read_link(path) {","class":"linePartCov","hits":"1","order":"5454","possible_hits":"9",},
{"lineNum":"  204","line":"                Ok(ref f) => self.dispatch_any_file(f, None),","class":"lineCov","hits":"2","order":"5459","possible_hits":"2",},
{"lineNum":"  205","line":"                Err(e) => warn!(\"Couldn\'t resolve symlink {:?}: {}\", path, e),","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  206","line":"            },","class":"linePartCov","hits":"2","order":"5477","possible_hits":"5",},
{"lineNum":"  207","line":"            FileType::Other => debug!(\"Ignoring unknown file {:?}\", path),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  208","line":"        }"},
{"lineNum":"  209","line":"    }","class":"lineCov","hits":"2","order":"5300","possible_hits":"2",},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"    /// Collect all specified files into a set; this consumes the DirWalker"},
{"lineNum":"  212","line":"    pub fn traverse_all(mut self) -> HashSet<PathBuf> {","class":"linePartCov","hits":"2","order":"5234","possible_hits":"3",},
{"lineNum":"  213","line":"        // steal directories (performance hack, ask owen)"},
{"lineNum":"  214","line":"        let directories = ::std::mem::replace(&mut self.directories, vec![]);","class":"linePartCov","hits":"1","order":"5236","possible_hits":"3",},
{"lineNum":"  215","line":"        for path in directories {","class":"linePartCov","hits":"5","order":"5242","possible_hits":"6",},
{"lineNum":"  216","line":"            self.dispatch_any_file(&path, None);","class":"linePartCov","hits":"2","order":"5260","possible_hits":"4",},
{"lineNum":"  217","line":"        }","class":"linePartCov","hits":"3","order":"5259","possible_hits":"7",},
{"lineNum":"  218","line":"        self.files","class":"lineCov","hits":"1","order":"5304","possible_hits":"1",},
{"lineNum":"  219","line":"    }","class":"linePartCov","hits":"2","order":"5305","possible_hits":"3",},
{"lineNum":"  220","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "smllr-cd1387de2be9f35d", "date" : "2017-12-06 19:01:08", "instrumented" : 108, "covered" : 94,};
var merged_data = [];
