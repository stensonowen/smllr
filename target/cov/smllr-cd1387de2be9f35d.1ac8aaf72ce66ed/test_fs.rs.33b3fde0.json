var data = {lines:[
{"lineNum":"    1","line":"// mock filesystem for testing"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"use std::io;"},
{"lineNum":"    4","line":"use std::rc::Rc;"},
{"lineNum":"    5","line":"use std::cell::RefCell;"},
{"lineNum":"    6","line":"use std::path::{Path, PathBuf};"},
{"lineNum":"    7","line":"use std::time::{self, SystemTime};"},
{"lineNum":"    8","line":"use std::collections::{HashMap, HashSet};"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"use vfs::{DeviceId, File, FileType, Inode, MetaData, VFS};"},
{"lineNum":"   11","line":"use helpers::{FIRST_K_BYTES, ID};"},
{"lineNum":"   12","line":"use hash::FileHash;"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"/// `TestMD` is the mock metadata struct."},
{"lineNum":"   15","line":"#[derive(Debug, Clone, Copy, PartialEq)]","class":"lineCov","hits":"2","order":"3350","possible_hits":"2",},
{"lineNum":"   16","line":"pub struct TestMD {"},
{"lineNum":"   17","line":"    len: u64,"},
{"lineNum":"   18","line":"    modified: SystemTime,"},
{"lineNum":"   19","line":"    kind: FileType,"},
{"lineNum":"   20","line":"    id: ID,"},
{"lineNum":"   21","line":"}"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"//implementation of the MetaData trait for testMD."},
{"lineNum":"   24","line":"impl MetaData for TestMD {"},
{"lineNum":"   25","line":"    fn get_len(&self) -> u64 {","class":"lineCov","hits":"2","order":"3360","possible_hits":"2",},
{"lineNum":"   26","line":"        self.len","class":"lineCov","hits":"1","order":"3361","possible_hits":"1",},
{"lineNum":"   27","line":"    }","class":"linePartCov","hits":"1","order":"3362","possible_hits":"2",},
{"lineNum":"   28","line":"    fn get_mod_time(&self) -> io::Result<SystemTime> {","class":"lineCov","hits":"2","order":"4492","possible_hits":"2",},
{"lineNum":"   29","line":"        Ok(self.modified)","class":"lineCov","hits":"1","order":"4493","possible_hits":"1",},
{"lineNum":"   30","line":"    }","class":"linePartCov","hits":"1","order":"4494","possible_hits":"2",},
{"lineNum":"   31","line":"    fn get_type(&self) -> FileType {","class":"lineCov","hits":"2","order":"5373","possible_hits":"2",},
{"lineNum":"   32","line":"        self.kind","class":"lineCov","hits":"1","order":"5374","possible_hits":"1",},
{"lineNum":"   33","line":"    }","class":"linePartCov","hits":"1","order":"5375","possible_hits":"2",},
{"lineNum":"   34","line":"    fn get_inode(&self) -> Inode {","class":"lineCov","hits":"2","order":"4283","possible_hits":"2",},
{"lineNum":"   35","line":"        Inode(self.id.inode)","class":"lineCov","hits":"1","order":"4284","possible_hits":"1",},
{"lineNum":"   36","line":"    }","class":"linePartCov","hits":"1","order":"4285","possible_hits":"2",},
{"lineNum":"   37","line":"    fn get_device(&self) -> io::Result<DeviceId> {","class":"lineCov","hits":"2","order":"4172","possible_hits":"2",},
{"lineNum":"   38","line":"        Ok(DeviceId(self.id.dev))","class":"lineCov","hits":"1","order":"4173","possible_hits":"1",},
{"lineNum":"   39","line":"    }","class":"linePartCov","hits":"1","order":"4174","possible_hits":"2",},
{"lineNum":"   40","line":"}"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"// TestMD must be easy to make and also customize for unit testing"},
{"lineNum":"   43","line":"// We provide a series of chainable setters to easily construct test objects"},
{"lineNum":"   44","line":"// e.g. `TestMD::new().with_len(4096).with_id(42)`"},
{"lineNum":"   45","line":"impl TestMD {"},
{"lineNum":"   46","line":"    pub fn new() -> Self {","class":"lineCov","hits":"1","order":"2858","possible_hits":"1",},
{"lineNum":"   47","line":"        TestMD {","class":"lineCov","hits":"1","order":"2864","possible_hits":"1",},
{"lineNum":"   48","line":"            len: 0,"},
{"lineNum":"   49","line":"            modified: SystemTime::now(),","class":"lineCov","hits":"1","order":"2859","possible_hits":"1",},
{"lineNum":"   50","line":"            kind: FileType::File,","class":"lineCov","hits":"1","order":"2862","possible_hits":"1",},
{"lineNum":"   51","line":"            id: ID { dev: 0, inode: 0 },","class":"lineCov","hits":"1","order":"2863","possible_hits":"1",},
{"lineNum":"   52","line":"        }"},
{"lineNum":"   53","line":"    }","class":"linePartCov","hits":"1","order":"2865","possible_hits":"2",},
{"lineNum":"   54","line":"    pub fn with_len(mut self, n: u64) -> Self {"},
{"lineNum":"   55","line":"        self.len = n;"},
{"lineNum":"   56","line":"        self"},
{"lineNum":"   57","line":"    }"},
{"lineNum":"   58","line":"    pub fn with_mod_time(mut self, t: SystemTime) -> Self {","class":"lineCov","hits":"2","order":"4331","possible_hits":"2",},
{"lineNum":"   59","line":"        self.modified = t;","class":"lineCov","hits":"1","order":"4334","possible_hits":"1",},
{"lineNum":"   60","line":"        self","class":"lineCov","hits":"1","order":"4336","possible_hits":"1",},
{"lineNum":"   61","line":"    }","class":"linePartCov","hits":"1","order":"4338","possible_hits":"2",},
{"lineNum":"   62","line":"    pub fn with_kind(mut self, k: FileType) -> Self {"},
{"lineNum":"   63","line":"        self.kind = k;"},
{"lineNum":"   64","line":"        self"},
{"lineNum":"   65","line":"    }"},
{"lineNum":"   66","line":"    pub fn with_id(mut self, id: ID) -> Self {","class":"lineCov","hits":"2","order":"4016","possible_hits":"2",},
{"lineNum":"   67","line":"        self.id = id;","class":"lineCov","hits":"1","order":"4017","possible_hits":"1",},
{"lineNum":"   68","line":"        self","class":"lineCov","hits":"1","order":"4018","possible_hits":"1",},
{"lineNum":"   69","line":"    }","class":"linePartCov","hits":"1","order":"4019","possible_hits":"2",},
{"lineNum":"   70","line":"}"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"/// `TestFile` denotes a mockfile."},
{"lineNum":"   73","line":"/// Note that we are mocking the linux-style filesystem"},
{"lineNum":"   74","line":"/// where many things are \'files\', including directories,"},
{"lineNum":"   75","line":"/// links, devices (/dev/sda might be familair)."},
{"lineNum":"   76","line":"#[derive(Debug, Clone, PartialEq)]","class":"linePartCov","hits":"3","order":"3342","possible_hits":"5",},
{"lineNum":"   77","line":"pub struct TestFile {"},
{"lineNum":"   78","line":"    path: PathBuf,","class":"lineCov","hits":"2","order":"3343","possible_hits":"2",},
{"lineNum":"   79","line":"    contents: Option<String>,","class":"linePartCov","hits":"2","order":"3344","possible_hits":"3",},
{"lineNum":"   80","line":"    kind: FileType,","class":"linePartCov","hits":"3","order":"3345","possible_hits":"4",},
{"lineNum":"   81","line":"    inode: Inode,","class":"linePartCov","hits":"3","order":"3346","possible_hits":"4",},
{"lineNum":"   82","line":"    metadata: Option<TestMD>,","class":"linePartCov","hits":"2","order":"3347","possible_hits":"3",},
{"lineNum":"   83","line":"}"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"// build up a File object for mock testing"},
{"lineNum":"   86","line":"// Chainable setters to easily construct test objects"},
{"lineNum":"   87","line":"// e.g. `TestFile::new().with_kind(FileType::Dir).with_inode(42)`"},
{"lineNum":"   88","line":"impl TestFile {"},
{"lineNum":"   89","line":"    pub fn new(s: &str) -> Self {","class":"lineCov","hits":"2","order":"2848","possible_hits":"2",},
{"lineNum":"   90","line":"        TestFile {","class":"lineCov","hits":"1","order":"2856","possible_hits":"1",},
{"lineNum":"   91","line":"            path: PathBuf::from(s),","class":"lineCov","hits":"1","order":"2849","possible_hits":"1",},
{"lineNum":"   92","line":"            contents: None,","class":"lineCov","hits":"1","order":"2852","possible_hits":"1",},
{"lineNum":"   93","line":"            kind: FileType::File,","class":"lineCov","hits":"1","order":"2853","possible_hits":"1",},
{"lineNum":"   94","line":"            inode: Inode(0),","class":"lineCov","hits":"1","order":"2854","possible_hits":"1",},
{"lineNum":"   95","line":"            metadata: None,","class":"lineCov","hits":"1","order":"2855","possible_hits":"1",},
{"lineNum":"   96","line":"        }"},
{"lineNum":"   97","line":"    }","class":"linePartCov","hits":"1","order":"2857","possible_hits":"2",},
{"lineNum":"   98","line":"    pub fn with_contents(mut self, c: String) -> Self {","class":"linePartCov","hits":"2","order":"4539","possible_hits":"3",},
{"lineNum":"   99","line":"        if let Some(ref mut md) = self.metadata {","class":"linePartCov","hits":"1","order":"4540","possible_hits":"3",},
{"lineNum":"  100","line":"            md.len = c.len() as u64;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  101","line":"        }"},
{"lineNum":"  102","line":"        self.contents = Some(c);","class":"linePartCov","hits":"1","order":"4541","possible_hits":"2",},
{"lineNum":"  103","line":"        self","class":"lineCov","hits":"1","order":"4542","possible_hits":"1",},
{"lineNum":"  104","line":"    }","class":"linePartCov","hits":"1","order":"4543","possible_hits":"3",},
{"lineNum":"  105","line":"    pub fn with_kind(mut self, k: FileType) -> Self {","class":"lineCov","hits":"2","order":"4010","possible_hits":"2",},
{"lineNum":"  106","line":"        if let Some(ref mut md) = self.metadata {","class":"lineCov","hits":"1","order":"4011","possible_hits":"1",},
{"lineNum":"  107","line":"            md.kind = k;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  108","line":"        }"},
{"lineNum":"  109","line":"        self.kind = k;","class":"lineCov","hits":"1","order":"4012","possible_hits":"1",},
{"lineNum":"  110","line":"        self","class":"lineCov","hits":"1","order":"4013","possible_hits":"1",},
{"lineNum":"  111","line":"    }","class":"linePartCov","hits":"1","order":"4014","possible_hits":"2",},
{"lineNum":"  112","line":"    pub fn with_inode(mut self, i: u64) -> Self {","class":"lineCov","hits":"2","order":"4203","possible_hits":"2",},
{"lineNum":"  113","line":"        if let Some(ref mut md) = self.metadata {","class":"lineCov","hits":"1","order":"4204","possible_hits":"1",},
{"lineNum":"  114","line":"            md.id.inode = i;","class":"lineCov","hits":"1","order":"4549","possible_hits":"1",},
{"lineNum":"  115","line":"        }"},
{"lineNum":"  116","line":"        self.inode = Inode(i);","class":"lineCov","hits":"1","order":"4205","possible_hits":"1",},
{"lineNum":"  117","line":"        self","class":"lineCov","hits":"1","order":"4206","possible_hits":"1",},
{"lineNum":"  118","line":"    }","class":"linePartCov","hits":"1","order":"4207","possible_hits":"2",},
{"lineNum":"  119","line":"    pub fn with_metadata(mut self, mut md: TestMD) -> Self {","class":"linePartCov","hits":"2","order":"2866","possible_hits":"3",},
{"lineNum":"  120","line":"        // fix filetype discrepancy"},
{"lineNum":"  121","line":"        if self.kind != FileType::File {","class":"linePartCov","hits":"3","order":"2867","possible_hits":"4",},
{"lineNum":"  122","line":"            md.kind = self.kind;","class":"lineCov","hits":"1","order":"4020","possible_hits":"1",},
{"lineNum":"  123","line":"        } else if md.kind != FileType::File {","class":"linePartCov","hits":"1","order":"2870","possible_hits":"2",},
{"lineNum":"  124","line":"            self.kind = md.kind;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":"        }"},
{"lineNum":"  126","line":"        // fix len discrepancy"},
{"lineNum":"  127","line":"        if let Some(ref c) = self.contents {","class":"lineCov","hits":"4","order":"2871","possible_hits":"4",},
{"lineNum":"  128","line":"            md.len = c.len() as u64;","class":"lineCov","hits":"2","order":"4545","possible_hits":"2",},
{"lineNum":"  129","line":"        } else if md.len != 0 {","class":"linePartCov","hits":"1","order":"2872","possible_hits":"2",},
{"lineNum":"  130","line":"            // for now do nothing"},
{"lineNum":"  131","line":"            // it is okay for `len` to be >0 and `contents` to be empty"},
{"lineNum":"  132","line":"            //let contents = ::std::iter::repeat(\'?\').take(md.len as usize).collect();"},
{"lineNum":"  133","line":"            //self.contents = Some(contents);"},
{"lineNum":"  134","line":"        }"},
{"lineNum":"  135","line":"        // fix inode discrepancy"},
{"lineNum":"  136","line":"        if self.inode.0 != 0 {","class":"lineCov","hits":"3","order":"2873","possible_hits":"3",},
{"lineNum":"  137","line":"            md.id.inode = self.inode.0;","class":"lineCov","hits":"1","order":"4210","possible_hits":"1",},
{"lineNum":"  138","line":"        } else if md.id.inode != 0 {","class":"lineCov","hits":"2","order":"2874","possible_hits":"2",},
{"lineNum":"  139","line":"            self.inode.0 = md.id.inode;","class":"lineCov","hits":"1","order":"4021","possible_hits":"1",},
{"lineNum":"  140","line":"        }"},
{"lineNum":"  141","line":"        self.metadata = Some(md);","class":"lineCov","hits":"1","order":"2875","possible_hits":"1",},
{"lineNum":"  142","line":"        self","class":"lineCov","hits":"1","order":"2876","possible_hits":"1",},
{"lineNum":"  143","line":"    }","class":"linePartCov","hits":"1","order":"2877","possible_hits":"2",},
{"lineNum":"  144","line":"}"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"/// Implementation of the File trait for `TestFile`"},
{"lineNum":"  147","line":"impl File for TestFile {"},
{"lineNum":"  148","line":"    type MD = TestMD;"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"    fn get_path(&self) -> PathBuf {","class":"lineCov","hits":"2","order":"5433","possible_hits":"2",},
{"lineNum":"  151","line":"        self.path.clone()","class":"lineCov","hits":"1","order":"5434","possible_hits":"1",},
{"lineNum":"  152","line":"    }","class":"linePartCov","hits":"1","order":"5435","possible_hits":"2",},
{"lineNum":"  153","line":"    fn get_inode(&self) -> io::Result<Inode> {","class":"lineCov","hits":"2","order":"4140","possible_hits":"2",},
{"lineNum":"  154","line":"        Ok(self.inode)","class":"lineCov","hits":"1","order":"4142","possible_hits":"1",},
{"lineNum":"  155","line":"    }","class":"linePartCov","hits":"1","order":"4144","possible_hits":"2",},
{"lineNum":"  156","line":"    fn get_type(&self) -> io::Result<FileType> {","class":"lineCov","hits":"2","order":"5436","possible_hits":"2",},
{"lineNum":"  157","line":"        Ok(self.kind)","class":"lineCov","hits":"1","order":"5437","possible_hits":"1",},
{"lineNum":"  158","line":"    }","class":"linePartCov","hits":"1","order":"5438","possible_hits":"2",},
{"lineNum":"  159","line":"    fn get_metadata(&self) -> io::Result<TestMD> {","class":"lineCov","hits":"2","order":"3356","possible_hits":"2",},
{"lineNum":"  160","line":"        self.metadata","class":"lineCov","hits":"1","order":"3357","possible_hits":"1",},
{"lineNum":"  161","line":"            .ok_or_else(|| io::Error::new(io::ErrorKind::Other, \"No MD\"))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  162","line":"    }","class":"linePartCov","hits":"1","order":"3359","possible_hits":"2",},
{"lineNum":"  163","line":"    //fn get_first_bytes(&self) -> io::Result<FirstBytes> {"},
{"lineNum":"  164","line":"    fn get_first_bytes<H: FileHash>(&self) -> io::Result<<H as FileHash>::Output> {","class":"linePartCov","hits":"2","order":"4756","possible_hits":"4",},
{"lineNum":"  165","line":"        // read the first K bytes of the file"},
{"lineNum":"  166","line":"        // if the file is less than K bytes, the remaining bytes are treated as zeros"},
{"lineNum":"  167","line":"        if let Some(ref cont) = self.contents {","class":"linePartCov","hits":"3","order":"4758","possible_hits":"10",},
{"lineNum":"  168","line":"            let mut bytes = [0u8; FIRST_K_BYTES];","class":"linePartCov","hits":"1","order":"4759","possible_hits":"2",},
{"lineNum":"  169","line":"            for (c, b) in cont.bytes().zip(bytes.iter_mut()) {","class":"linePartCov","hits":"4","order":"4760","possible_hits":"8",},
{"lineNum":"  170","line":"                *b = c;","class":"linePartCov","hits":"1","order":"4818","possible_hits":"2",},
{"lineNum":"  171","line":"            }"},
{"lineNum":"  172","line":"            //Ok(FirstBytes(bytes))"},
{"lineNum":"  173","line":"            Ok(H::hash(&bytes))","class":"linePartCov","hits":"2","order":"4820","possible_hits":"4",},
{"lineNum":"  174","line":"        } else {"},
{"lineNum":"  175","line":"            Err(io::Error::new(io::ErrorKind::NotFound, \"No contents set\"))","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  176","line":"        }"},
{"lineNum":"  177","line":"    }","class":"linePartCov","hits":"1","order":"4865","possible_hits":"2",},
{"lineNum":"  178","line":"    fn get_hash<H: FileHash>(&self) -> io::Result<<H as FileHash>::Output> {","class":"linePartCov","hits":"2","order":"4978","possible_hits":"4",},
{"lineNum":"  179","line":"        if let Some(ref cont) = self.contents {","class":"linePartCov","hits":"3","order":"4979","possible_hits":"10",},
{"lineNum":"  180","line":"            Ok(H::hash(cont.as_bytes()))","class":"linePartCov","hits":"2","order":"4980","possible_hits":"4",},
{"lineNum":"  181","line":"        } else {"},
{"lineNum":"  182","line":"            Err(io::Error::new(io::ErrorKind::NotFound, \"No contents set\"))","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  183","line":"        }"},
{"lineNum":"  184","line":"    }","class":"linePartCov","hits":"1","order":"4984","possible_hits":"2",},
{"lineNum":"  185","line":"}"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"/// Denotes a Mock Filesystem used instead of risking"},
{"lineNum":"  188","line":"/// real data or dealing with the actual filesystem"},
{"lineNum":"  189","line":"#[derive(Debug)]"},
{"lineNum":"  190","line":"pub struct TestFileSystem {"},
{"lineNum":"  191","line":"    files: HashMap<PathBuf, TestFile>,"},
{"lineNum":"  192","line":"    symlinks: HashMap<PathBuf, (TestFile, PathBuf)>,"},
{"lineNum":"  193","line":"}"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"impl TestFileSystem {"},
{"lineNum":"  196","line":"    // private helper functions:"},
{"lineNum":"  197","line":"    // gets the number of files on the mock system."},
{"lineNum":"  198","line":"    // The name denotes its use when adding a new inode,"},
{"lineNum":"  199","line":"    // as sequentially, they are numbered 0, 1, ..."},
{"lineNum":"  200","line":"    // Ergo with N inodes, the next inode will be"},
{"lineNum":"  201","line":"    // given the id N."},
{"lineNum":"  202","line":"    fn get_next_inode(&self) -> Inode {","class":"lineCov","hits":"2","order":"2567","possible_hits":"2",},
{"lineNum":"  203","line":"        Inode((self.files.len() + self.symlinks.len()) as u64)","class":"linePartCov","hits":"1","order":"2568","possible_hits":"3",},
{"lineNum":"  204","line":"    }","class":"lineCov","hits":"1","order":"2574","possible_hits":"1",},
{"lineNum":"  205","line":"    // Creates a new MockFile with FileType kind and a Path of path"},
{"lineNum":"  206","line":"    // Not used to create a new symlink."},
{"lineNum":"  207","line":"    fn create_regular(&mut self, path: &Path, kind: FileType) {","class":"linePartCov","hits":"2","order":"2565","possible_hits":"3",},
{"lineNum":"  208","line":"        let inode = self.get_next_inode();","class":"lineCov","hits":"1","order":"2566","possible_hits":"1",},
{"lineNum":"  209","line":"        // Create the metadata for the file"},
{"lineNum":"  210","line":"        let md = TestMD {","class":"lineCov","hits":"1","order":"2578","possible_hits":"1",},
{"lineNum":"  211","line":"            len: 0,"},
{"lineNum":"  212","line":"            modified: time::UNIX_EPOCH,"},
{"lineNum":"  213","line":"            kind,","class":"lineCov","hits":"1","order":"2575","possible_hits":"1",},
{"lineNum":"  214","line":"            id: ID {","class":"lineCov","hits":"1","order":"2577","possible_hits":"1",},
{"lineNum":"  215","line":"                inode: inode.0,","class":"lineCov","hits":"1","order":"2576","possible_hits":"1",},
{"lineNum":"  216","line":"                dev: 0,"},
{"lineNum":"  217","line":"            },"},
{"lineNum":"  218","line":"        };"},
{"lineNum":"  219","line":"        // Create the File."},
{"lineNum":"  220","line":"        let tf = TestFile {","class":"lineCov","hits":"1","order":"2586","possible_hits":"1",},
{"lineNum":"  221","line":"            path: path.to_owned(),","class":"lineCov","hits":"1","order":"2579","possible_hits":"1",},
{"lineNum":"  222","line":"            kind,","class":"lineCov","hits":"1","order":"2582","possible_hits":"1",},
{"lineNum":"  223","line":"            inode,","class":"lineCov","hits":"1","order":"2583","possible_hits":"1",},
{"lineNum":"  224","line":"            contents: None,","class":"lineCov","hits":"1","order":"2584","possible_hits":"1",},
{"lineNum":"  225","line":"            metadata: Some(md),","class":"lineCov","hits":"1","order":"2585","possible_hits":"1",},
{"lineNum":"  226","line":"        };"},
{"lineNum":"  227","line":"        // Add the file to the filesystem."},
{"lineNum":"  228","line":"        self.files.insert(path.to_owned(), tf);","class":"linePartCov","hits":"1","order":"2587","possible_hits":"2",},
{"lineNum":"  229","line":"    }","class":"linePartCov","hits":"1","order":"2845","possible_hits":"2",},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"    /// constructor: initializes self."},
{"lineNum":"  232","line":"    pub fn new() -> Rc<RefCell<Self>> {","class":"linePartCov","hits":"1","order":"2356","possible_hits":"2",},
{"lineNum":"  233","line":"        Rc::new(RefCell::new(TestFileSystem {","class":"lineCov","hits":"2","order":"2478","possible_hits":"2",},
{"lineNum":"  234","line":"            files: HashMap::new(),","class":"lineCov","hits":"1","order":"2357","possible_hits":"1",},
{"lineNum":"  235","line":"            symlinks: HashMap::new(),","class":"lineCov","hits":"1","order":"2477","possible_hits":"1",},
{"lineNum":"  236","line":"        }))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  237","line":"    }","class":"lineCov","hits":"1","order":"2531","possible_hits":"1",},
{"lineNum":"  238","line":"    /// get size"},
{"lineNum":"  239","line":"    pub fn num_elements(&self) -> usize {","class":"lineCov","hits":"2","order":"3497","possible_hits":"2",},
{"lineNum":"  240","line":"        self.files.len() + self.symlinks.len()","class":"linePartCov","hits":"1","order":"3498","possible_hits":"3",},
{"lineNum":"  241","line":"    }","class":"lineCov","hits":"1","order":"3499","possible_hits":"1",},
{"lineNum":"  242","line":"    /// get number of unique inodes"},
{"lineNum":"  243","line":"    pub fn num_inodes(&self) -> usize {","class":"linePartCov","hits":"2","order":"4033","possible_hits":"3",},
{"lineNum":"  244","line":"        let inodes: HashSet<_> = self.files","class":"lineCov","hits":"1","order":"4034","possible_hits":"1",},
{"lineNum":"  245","line":"            .iter()"},
{"lineNum":"  246","line":"            .map(|f| f.1.get_inode().unwrap())","class":"lineCov","hits":"2","order":"4137","possible_hits":"2",},
{"lineNum":"  247","line":"            .collect();"},
{"lineNum":"  248","line":"        inodes.len()","class":"lineCov","hits":"1","order":"4154","possible_hits":"1",},
{"lineNum":"  249","line":"    }","class":"linePartCov","hits":"1","order":"4158","possible_hits":"2",},
{"lineNum":"  250","line":"    /// Creates a new file at path. Anologous to \'$touch path\'"},
{"lineNum":"  251","line":"    pub fn create_file<P: AsRef<Path>>(&mut self, path: P) {","class":"linePartCov","hits":"2","order":"5160","possible_hits":"3",},
{"lineNum":"  252","line":"        self.create_regular(path.as_ref(), FileType::File);","class":"linePartCov","hits":"1","order":"5161","possible_hits":"3",},
{"lineNum":"  253","line":"    }","class":"linePartCov","hits":"2","order":"5162","possible_hits":"3",},
{"lineNum":"  254","line":"    /// Creates a new directory with path. Anologus to \'$mkdir path\'"},
{"lineNum":"  255","line":"    pub fn create_dir<P: AsRef<Path>>(&mut self, path: P) {","class":"linePartCov","hits":"2","order":"2561","possible_hits":"3",},
{"lineNum":"  256","line":"        self.create_regular(path.as_ref(), FileType::Dir);","class":"linePartCov","hits":"1","order":"2562","possible_hits":"3",},
{"lineNum":"  257","line":"    }","class":"linePartCov","hits":"2","order":"2846","possible_hits":"3",},
{"lineNum":"  258","line":"    /// Creates a new symlink from path to target. analogous to"},
{"lineNum":"  259","line":"    /// `ln -s -t target path`"},
{"lineNum":"  260","line":"    pub fn create_symlink<P: AsRef<Path>>(&mut self, path: P, target: P) {","class":"linePartCov","hits":"2","order":"5349","possible_hits":"3",},
{"lineNum":"  261","line":"        // Create the symlink file."},
{"lineNum":"  262","line":"        let tf = TestFile {","class":"lineCov","hits":"1","order":"5355","possible_hits":"1",},
{"lineNum":"  263","line":"            path: path.as_ref().to_owned(),","class":"linePartCov","hits":"1","order":"5350","possible_hits":"3",},
{"lineNum":"  264","line":"            kind: FileType::Symlink,","class":"lineCov","hits":"1","order":"5351","possible_hits":"1",},
{"lineNum":"  265","line":"            inode: self.get_next_inode(),","class":"lineCov","hits":"2","order":"5352","possible_hits":"2",},
{"lineNum":"  266","line":"            contents: None,","class":"lineCov","hits":"1","order":"5353","possible_hits":"1",},
{"lineNum":"  267","line":"            metadata: None,","class":"lineCov","hits":"1","order":"5354","possible_hits":"1",},
{"lineNum":"  268","line":"        };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  269","line":"        // add the symlink to the filesystem."},
{"lineNum":"  270","line":"        let val = (tf, target.as_ref().to_owned());","class":"linePartCov","hits":"2","order":"5356","possible_hits":"3",},
{"lineNum":"  271","line":"        self.symlinks.insert(path.as_ref().to_owned(), val);","class":"linePartCov","hits":"2","order":"5357","possible_hits":"3",},
{"lineNum":"  272","line":"    }","class":"linePartCov","hits":"1","order":"5364","possible_hits":"3",},
{"lineNum":"  273","line":"    /// Register a new file"},
{"lineNum":"  274","line":"    pub fn add(&mut self, tf: TestFile) {","class":"linePartCov","hits":"2","order":"2878","possible_hits":"3",},
{"lineNum":"  275","line":"        self.files.insert(tf.path.to_owned(), tf);","class":"linePartCov","hits":"1","order":"2879","possible_hits":"2",},
{"lineNum":"  276","line":"    }","class":"linePartCov","hits":"1","order":"3038","possible_hits":"2",},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"    // getters for the Mock Filesystem."},
{"lineNum":"  279","line":"    // RUST SYNTAX: <\'a> is a lifetime paramater. Lifetimes are pretty"},
{"lineNum":"  280","line":"    // unique to rust; essentially they are used to pass the parent"},
{"lineNum":"  281","line":"    // through so they are invalidated when the parent is."},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"    /// Resolves the path into a TestFile"},
{"lineNum":"  284","line":"    fn lookup<\'a>(&\'a self, path: &Path) -> io::Result<&\'a TestFile> {","class":"linePartCov","hits":"2","order":"5460","possible_hits":"3",},
{"lineNum":"  285","line":"        if let Some(tf) = self.files.get(path) {","class":"linePartCov","hits":"1","order":"5461","possible_hits":"3",},
{"lineNum":"  286","line":"            Ok(tf)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  287","line":"        } else {","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  288","line":"            // traverse the symlink chain"},
{"lineNum":"  289","line":"            let mut cur = self.symlinks.get(path);","class":"lineCov","hits":"1","order":"5462","possible_hits":"1",},
{"lineNum":"  290","line":"            // `seen` can\'t be a Hash table because SystemTime isn\'t Hash"},
{"lineNum":"  291","line":"            let mut seen: Vec<&Path> = vec![];","class":"lineCov","hits":"1","order":"5463","possible_hits":"1",},
{"lineNum":"  292","line":"            while let Some(c) = cur {","class":"lineCov","hits":"3","order":"5464","possible_hits":"3",},
{"lineNum":"  293","line":"                if seen.contains(&c.1.as_path()) {","class":"lineCov","hits":"3","order":"5465","possible_hits":"3",},
{"lineNum":"  294","line":"                    // infinite symlink loop"},
{"lineNum":"  295","line":"                    return Err(io::Error::from_raw_os_error(40));","class":"lineCov","hits":"3","order":"5469","possible_hits":"3",},
{"lineNum":"  296","line":"                } else {"},
{"lineNum":"  297","line":"                    seen.push(&c.1);","class":"lineCov","hits":"2","order":"5466","possible_hits":"2",},
{"lineNum":"  298","line":"                    cur = self.symlinks.get(&c.1);","class":"lineCov","hits":"2","order":"5467","possible_hits":"2",},
{"lineNum":"  299","line":"                }"},
{"lineNum":"  300","line":"            }"},
{"lineNum":"  301","line":"            Err(io::Error::new(io::ErrorKind::NotFound, \"No such file\"))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  302","line":"        }","class":"linePartCov","hits":"1","order":"5473","possible_hits":"3",},
{"lineNum":"  303","line":"    }","class":"linePartCov","hits":"1","order":"5474","possible_hits":"2",},
{"lineNum":"  304","line":"}"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"// Implementation of the VFS interface for the whole of the Mock File System."},
{"lineNum":"  307","line":"impl VFS for Rc<RefCell<TestFileSystem>> {"},
{"lineNum":"  308","line":"    type FileIter = TestFile;"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"    /// VFS::list_dir(p)  gets an iterator over the contents of p."},
{"lineNum":"  311","line":"    fn list_dir<P: AsRef<Path>>(","class":"linePartCov","hits":"1","order":"5404","possible_hits":"2",},
{"lineNum":"  312","line":"        &self,","class":"lineCov","hits":"1","order":"5405","possible_hits":"1",},
{"lineNum":"  313","line":"        p: P,","class":"lineCov","hits":"1","order":"5406","possible_hits":"1",},
{"lineNum":"  314","line":"    ) -> io::Result<Box<Iterator<Item = io::Result<TestFile>>>> {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  315","line":"        let mut v = vec![];","class":"lineCov","hits":"2","order":"5407","possible_hits":"2",},
{"lineNum":"  316","line":"        let fs = self.borrow();","class":"lineCov","hits":"2","order":"5408","possible_hits":"2",},
{"lineNum":"  317","line":"        // collect all files which are children of p"},
{"lineNum":"  318","line":"        let is_root = p.as_ref().components().count() == 1;","class":"linePartCov","hits":"2","order":"5409","possible_hits":"4",},
{"lineNum":"  319","line":"        for (path, file) in &fs.files {","class":"linePartCov","hits":"3","order":"5410","possible_hits":"12",},
{"lineNum":"  320","line":"            if path.parent() == Some(p.as_ref()) || (is_root && path.components().count() == 2) {","class":"linePartCov","hits":"8","order":"5414","possible_hits":"9",},
{"lineNum":"  321","line":"                // include a file if it\'s parent is in `p`"},
{"lineNum":"  322","line":"                // or if `p` is the root and `path` is 1 level down"},
{"lineNum":"  323","line":"                v.push(Ok(file.clone()));","class":"lineCov","hits":"2","order":"5415","possible_hits":"2",},
{"lineNum":"  324","line":"            }"},
{"lineNum":"  325","line":"        }"},
{"lineNum":"  326","line":"        // collect all symlinks which are children of p"},
{"lineNum":"  327","line":"        for (src, &(ref file, ref _dst)) in &fs.symlinks {","class":"linePartCov","hits":"3","order":"5420","possible_hits":"12",},
{"lineNum":"  328","line":"            if src.parent() == Some(p.as_ref()) || p.as_ref().parent().is_none() {","class":"linePartCov","hits":"5","order":"5421","possible_hits":"9",},
{"lineNum":"  329","line":"                v.push(Ok(file.clone()));","class":"lineCov","hits":"2","order":"5422","possible_hits":"2",},
{"lineNum":"  330","line":"            }"},
{"lineNum":"  331","line":"        }"},
{"lineNum":"  332","line":"        // return the iterator."},
{"lineNum":"  333","line":"        Ok(Box::new(v.into_iter()))","class":"lineCov","hits":"2","order":"5423","possible_hits":"2",},
{"lineNum":"  334","line":"    }","class":"linePartCov","hits":"1","order":"5424","possible_hits":"4",},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"    //RUST NOTE: match is roughly equivlent to the c\'s \'switch\'."},
{"lineNum":"  337","line":"    // match expr {"},
{"lineNum":"  338","line":"    //     expr1 => block,"},
{"lineNum":"  339","line":"    //     expr2 => block,"},
{"lineNum":"  340","line":"    // }"},
{"lineNum":"  341","line":"    // is equivlent to"},
{"lineNum":"  342","line":"    // switch (expr) {"},
{"lineNum":"  343","line":"    //     case expr1:"},
{"lineNum":"  344","line":"    //         block"},
{"lineNum":"  345","line":"    //     case expr2:"},
{"lineNum":"  346","line":"    //         block"},
{"lineNum":"  347","line":"    //}"},
{"lineNum":"  348","line":"    //"},
{"lineNum":"  349","line":"    // The \'_\' expresion when used in match is equivelent to default in c"},
{"lineNum":"  350","line":"    //"},
{"lineNum":"  351","line":"    //Match also supports deconstructing and binding. see"},
{"lineNum":"  352","line":"    // https://rustbyexample.com/flow_control/match.html"},
{"lineNum":"  353","line":"    // for more information."},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"    /// VFS::get_metadata gets the Metadata of Path"},
{"lineNum":"  356","line":"    /// FileType of path cannot be symlink; they are handled diffrently; use"},
{"lineNum":"  357","line":"    /// VFS::get_symlink_metadata for symlinks"},
{"lineNum":"  358","line":"    fn get_metadata<P: AsRef<Path>>(&self, path: P) -> io::Result<<Self::FileIter as File>::MD> {","class":"linePartCov","hits":"2","order":"5264","possible_hits":"6",},
{"lineNum":"  359","line":"        let fs = self.borrow();","class":"lineCov","hits":"2","order":"5265","possible_hits":"2",},
{"lineNum":"  360","line":"        match fs.files.get(path.as_ref()) {","class":"linePartCov","hits":"4","order":"5266","possible_hits":"14",},
{"lineNum":"  361","line":"            Some(f) => f.get_metadata(),","class":"lineCov","hits":"2","order":"5270","possible_hits":"2",},
{"lineNum":"  362","line":"            None => match fs.symlinks.get(path.as_ref()) {","class":"lineCov","hits":"6","order":"5271","possible_hits":"6",},
{"lineNum":"  363","line":"                Some(&(_, ref p)) => fs.lookup(p).and_then(|f| f.get_metadata()),","class":"linePartCov","hits":"5","order":"5272","possible_hits":"7",},
{"lineNum":"  364","line":"                None => Err(io::Error::new(io::ErrorKind::NotFound, \"No such file\")),","class":"lineCov","hits":"2","order":"5273","possible_hits":"2",},
{"lineNum":"  365","line":"            },"},
{"lineNum":"  366","line":"        }"},
{"lineNum":"  367","line":"    }","class":"linePartCov","hits":"2","order":"5286","possible_hits":"4",},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"    /// VFS::get_symlink_metadata(p) gets the metadata for symlink p."},
{"lineNum":"  370","line":"    fn get_symlink_metadata<P: AsRef<Path>>("},
{"lineNum":"  371","line":"        &self,"},
{"lineNum":"  372","line":"        path: P,"},
{"lineNum":"  373","line":"    ) -> io::Result<<Self::FileIter as File>::MD> {"},
{"lineNum":"  374","line":"        let fs = self.borrow();"},
{"lineNum":"  375","line":"        match fs.files.get(path.as_ref()) {"},
{"lineNum":"  376","line":"            Some(f) => f.get_metadata(),"},
{"lineNum":"  377","line":"            None => match fs.symlinks.get(path.as_ref()) {"},
{"lineNum":"  378","line":"                Some(&(ref f, _)) => f.get_metadata(),"},
{"lineNum":"  379","line":"                None => Err(io::Error::new(io::ErrorKind::NotFound, \"No such file\")),"},
{"lineNum":"  380","line":"            },"},
{"lineNum":"  381","line":"        }"},
{"lineNum":"  382","line":"    }"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"    /// VFS::read_link(p) resolves symlink at path p to the path its pointing to"},
{"lineNum":"  385","line":"    /// or gives an error if the link is broken."},
{"lineNum":"  386","line":"    fn read_link<P: AsRef<Path>>(&self, path: P) -> io::Result<PathBuf> {","class":"linePartCov","hits":"2","order":"5455","possible_hits":"6",},
{"lineNum":"  387","line":"        match self.borrow().symlinks.get(path.as_ref()) {","class":"linePartCov","hits":"5","order":"5456","possible_hits":"8",},
{"lineNum":"  388","line":"            Some(&(_, ref p)) => Ok(p.to_owned()),","class":"lineCov","hits":"3","order":"5457","possible_hits":"3",},
{"lineNum":"  389","line":"            None => Err(io::Error::new(io::ErrorKind::NotFound, \"No such file\")),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  390","line":"        }"},
{"lineNum":"  391","line":"    }","class":"linePartCov","hits":"2","order":"5458","possible_hits":"4",},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"    fn get_file(&self, p: &Path) -> io::Result<Self::FileIter> {","class":"linePartCov","hits":"2","order":"3283","possible_hits":"4",},
{"lineNum":"  394","line":"        match self.borrow().files.get(p) {","class":"linePartCov","hits":"3","order":"3284","possible_hits":"6",},
{"lineNum":"  395","line":"            Some(f) => Ok(f.to_owned()),","class":"lineCov","hits":"3","order":"3341","possible_hits":"3",},
{"lineNum":"  396","line":"            None => Err(io::Error::new(io::ErrorKind::NotFound, \"No such file\")),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  397","line":"        }"},
{"lineNum":"  398","line":"    }","class":"linePartCov","hits":"2","order":"3351","possible_hits":"3",},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"    fn rm_file<P: AsRef<Path>>(&mut self, p: &P) -> io::Result<()> {","class":"linePartCov","hits":"2","order":"4229","possible_hits":"4",},
{"lineNum":"  401","line":"        let mut fs = self.borrow_mut();","class":"lineCov","hits":"2","order":"4230","possible_hits":"2",},
{"lineNum":"  402","line":"        match fs.files.remove(p.as_ref()) {","class":"linePartCov","hits":"2","order":"4231","possible_hits":"5",},
{"lineNum":"  403","line":"            Some(_) => Ok(()),","class":"lineCov","hits":"2","order":"4269","possible_hits":"2",},
{"lineNum":"  404","line":"            None => Err(io::Error::new(io::ErrorKind::Other, \"Couldn\'t delete file\")),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  405","line":"        }"},
{"lineNum":"  406","line":"    }","class":"linePartCov","hits":"1","order":"4270","possible_hits":"4",},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"    // create a hard link"},
{"lineNum":"  409","line":"    fn make_link(&mut self, src: &Path, dst: &Path) -> io::Result<()> {","class":"linePartCov","hits":"2","order":"4273","possible_hits":"18",},
{"lineNum":"  410","line":"        let mut fs = self.borrow_mut();","class":"lineCov","hits":"2","order":"4274","possible_hits":"2",},
{"lineNum":"  411","line":"        let old_md = fs.files","class":"linePartCov","hits":"5","order":"4275","possible_hits":"10",},
{"lineNum":"  412","line":"            .get(dst)","class":"lineCov","hits":"1","order":"4279","possible_hits":"1",},
{"lineNum":"  413","line":"            .ok_or_else(|| io::Error::new(io::ErrorKind::NotFound, \"No dst file\"))?","class":"linePartCov","hits":"1","order":"4280","possible_hits":"4",},
{"lineNum":"  414","line":"            .get_metadata()?;","class":"linePartCov","hits":"2","order":"4281","possible_hits":"8",},
{"lineNum":"  415","line":"        // need to know the old inode so the new can have the same"},
{"lineNum":"  416","line":"        let old_inode = old_md.get_inode();","class":"linePartCov","hits":"1","order":"4282","possible_hits":"2",},
{"lineNum":"  417","line":"        let old_device = old_md.get_device()?;","class":"linePartCov","hits":"2","order":"4286","possible_hits":"3",},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"        // verify new file is going to be"},
{"lineNum":"  420","line":"        let new_dir = src.parent().unwrap(); // can\'t be root","class":"lineCov","hits":"2","order":"4287","possible_hits":"2",},
{"lineNum":"  421","line":"        let new_device = fs.files","class":"linePartCov","hits":"9","order":"4288","possible_hits":"14",},
{"lineNum":"  422","line":"            .get(new_dir)","class":"lineCov","hits":"1","order":"4289","possible_hits":"1",},
{"lineNum":"  423","line":"            .ok_or_else(|| io::Error::new(io::ErrorKind::NotFound, \"No src md\"))?","class":"linePartCov","hits":"1","order":"4290","possible_hits":"4",},
{"lineNum":"  424","line":"            .get_metadata()?","class":"lineCov","hits":"1","order":"4291","possible_hits":"1",},
{"lineNum":"  425","line":"            .get_device()?;","class":"linePartCov","hits":"2","order":"4292","possible_hits":"10",},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"        if old_device != new_device {","class":"lineCov","hits":"1","order":"4293","possible_hits":"1",},
{"lineNum":"  428","line":"            // can\'t make a hard link across devices (on most filesystems)"},
{"lineNum":"  429","line":"            return Err(io::Error::new(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  430","line":"                io::ErrorKind::Other,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  431","line":"                \"Cannot make hard link across filesystems\","},
{"lineNum":"  432","line":"            ));"},
{"lineNum":"  433","line":"        }"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"        let name = src.to_str().expect(\"invalid unicode link name\");","class":"lineCov","hits":"3","order":"4294","possible_hits":"3",},
{"lineNum":"  436","line":"        fs.files.insert(","class":"linePartCov","hits":"2","order":"4299","possible_hits":"3",},
{"lineNum":"  437","line":"            src.to_path_buf(),","class":"lineCov","hits":"2","order":"4300","possible_hits":"2",},
{"lineNum":"  438","line":"            TestFile::new(name).with_inode(old_inode.0),","class":"lineCov","hits":"2","order":"4303","possible_hits":"2",},
{"lineNum":"  439","line":"        );","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  440","line":"        Ok(())","class":"lineCov","hits":"1","order":"4304","possible_hits":"1",},
{"lineNum":"  441","line":"    }","class":"linePartCov","hits":"2","order":"4305","possible_hits":"3",},
{"lineNum":"  442","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "smllr-cd1387de2be9f35d", "date" : "2017-12-06 19:01:08", "instrumented" : 231, "covered" : 213,};
var merged_data = [];
